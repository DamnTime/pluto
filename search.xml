<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>babel 探秘系列-基础篇</title>
    <url>/pluto/2022/08/10/babel01/</url>
    <content><![CDATA[<h1 id="babel-探秘-基础篇"><a href="#babel-探秘-基础篇" class="headerlink" title="babel 探秘-基础篇"></a>babel 探秘-基础篇</h1><p>在现代前端开发中，babel 可以说是一道绕不过去的坎，它让我们可以尽情的使用 esnext 语法（装逼）。当然，我们可以不去关心 babel 的配置吗？毕竟有那么多，毕竟搜索引擎在手天下我有。。。能给你找一大堆理由出来，你信不信。</p>
<p>不过为了技术水平的提升（还嫌不够卷吗？？），还是想去了解下。</p>
<h2 id="babel-是什么"><a href="#babel-是什么" class="headerlink" title="babel 是什么"></a>babel 是什么</h2><blockquote>
<ul>
<li>Babel 是一个 Javascript 转译器 （Transpiler）</li>
<li>babel 最开始叫 6to5，顾名思义是 es6 转 es5，但是后来随着 es 标准的演进，有了 es7、es8 等， 6to5 的名字已经不合适了，所以改名为了 babel。</li>
<li>babel 是巴别塔的意思，来自圣经中的典故：<br>当时人类联合起来兴建希望能通往天堂的高塔，为了阻止人类的计划，上帝让人类说不同的语言，使人类相互之间不能沟通，计划因此失败，人类自此各散东西。于是世上出现不同语言和种族提供解释。这座塔就是巴别塔。（取名字的艺术之高超啊。。。）</li>
</ul>
</blockquote>
<h2 id="babel-有什么用"><a href="#babel-有什么用" class="headerlink" title="babel 有什么用"></a>babel 有什么用</h2><blockquote>
<ul>
<li>把代码中的 esnext 的新的语法、typescript 和 flow 的语法转成基于目标环境支持的语法</li>
<li>通过 Polyfill 方式在目标环境中添加缺失的特性(@babel&#x2F;polyfill 模块)</li>
</ul>
</blockquote>
<h2 id="babel-怎么配置"><a href="#babel-怎么配置" class="headerlink" title="babel 怎么配置"></a>babel 怎么配置</h2><p>可分为两个层面：</p>
<h3 id="一：语法层面："><a href="#一：语法层面：" class="headerlink" title="一：语法层面："></a>一：语法层面：</h3><p>比如箭头函数、let、const、展开运算符等；<br>需要转译箭头函数时：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//.babelrc</span>
<span class="token punctuation">&#123;</span>
    <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-arrow-functions"</span><span class="token punctuation">]</span>
     <span class="token comment">// 当然也可以相对路径引入</span>
    <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./node_modules/@babel/plugin-transform-arrow-functions"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时会发现如果一个个配置的话，会非常繁琐，可能需要配置几十个插件，因此就引出我们第一个配置重点：preset。从字面我们可以理解到这是“预设”的意思。</p>
<h2 id="官方-Preset"><a href="#官方-Preset" class="headerlink" title="官方 Preset"></a>官方 Preset</h2><h4 id="babel-x2F-preset-env"><a href="#babel-x2F-preset-env" class="headerlink" title="@babel&#x2F;preset-env"></a>@babel&#x2F;preset-env</h4><ul>
<li>一篮子的 es next plugins 的集合, 主要是针对最新的 js 语法特性作 es5 语法的转换</li>
</ul>
<h4 id="babel-x2F-preset-flow"><a href="#babel-x2F-preset-flow" class="headerlink" title="@babel&#x2F;preset-flow"></a>@babel&#x2F;preset-flow</h4><ul>
<li>主要包含@babel&#x2F;plugin-transform-flow-strip-types 插件，针对 flow 语法的转换</li>
</ul>
<h4 id="babel-x2F-preset-react"><a href="#babel-x2F-preset-react" class="headerlink" title="@babel&#x2F;preset-react"></a>@babel&#x2F;preset-react</h4><ul>
<li>主要包含@babel&#x2F;plugin-syntax-jsx、@babel&#x2F;plugin-transform-react-jsx、@babel&#x2F;plugin-transform-react-display-name，针对 jsx 语法的转换</li>
</ul>
<h4 id="babel-x2F-preset-typescript"><a href="#babel-x2F-preset-typescript" class="headerlink" title="@babel&#x2F;preset-typescript"></a>@babel&#x2F;preset-typescript</h4><ul>
<li>主要包含@babel&#x2F;plugin-transform-flow-strip-types 插件，对 ts 语法的转换</li>
</ul>
<h2 id="这里主要介绍-babel-x2F-preset-env"><a href="#这里主要介绍-babel-x2F-preset-env" class="headerlink" title="这里主要介绍 @babel&#x2F;preset-env"></a>这里主要介绍 @babel&#x2F;preset-env</h2><p>在不进行任何配置的情况下，@babel&#x2F;preset-env 所包含的插件将支持所有最新的 JS 特性(ES2015,ES2016 等，不包含 stage 阶段)，将其转换成 ES5 代码，如果没有在 Babel 配置文件中(如 .babelrc)设置 targets 或 ignoreBrowserslistConfig，@babel&#x2F;preset-env 会使用 <a href="https://github.com/browserslist/browserslist">browserslist</a> 配置源，显然如果指定了<a href="https://github.com/browserslist/browserslist">browserslist</a>配置源会减少我们编译后的代码体积<br>配置 browserslist 有三种方法：</p>
<ol>
<li>在 babel 配置文件中 指定 target；</li>
<li>在项目根目录添加 .browserslistrc 文件；</li>
<li>在 package.json 文件中指定 browserslist 属性；</li>
</ol>
<p>例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">targets</span><span class="token operator">:</span> <span class="token string">"last 2 Chrome versions"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二、babel-用法-api-层面"><a href="#二、babel-用法-api-层面" class="headerlink" title="二、babel 用法-api 层面"></a>二、babel 用法-api 层面</h2><p>刚刚我们说到了 @babel&#x2F;preset-env 主要是针对语法层面的转译，但这还不够，还需要对 api 层面进行转换，比如 includes、Array.from 等等。此时我们的@babel-polyfill 便派上用场了；<br>polyfill 的使用同样可以分为两种：</p>
<ol>
<li>babel-polyfill<br>会污染全局适合在业务项目中使用。（Babel7.4.0 版本开始，babel&#x2F;polyfill 已经被废弃，推荐直接使用 core-js）;</li>
<li>babel-runtime<br>不污染全局适合在组件或类库项目中使用。</li>
</ol>
<h3 id="第一种（babel-polyfill）方式："><a href="#第一种（babel-polyfill）方式：" class="headerlink" title="第一种（babel-polyfill）方式："></a>第一种（babel-polyfill）方式：</h3><p>两种引入方式：</p>
<ol>
<li>简单粗暴，直接在项目入口文件或 webpack 中配置 entry 属性;<br>这种是方式全量引入，缺点也很明显，最终打包体积势必会增大</li>
<li>在 babel 的配置文件中设置 useBuiltIns 参数为 usage（按需引入），同时设置 corejs (如果不设置，会给出警告，默认使用的是”corejs”: 2)，这里建议安装 core-js@3，因为 core-js@2 分支中已经不会再添加新特性，新特性都会添加到 core-js@3，此时可以将之前全量引入的 @babel&#x2F;polyfill 删除了，因为会直接从 core-js 中引入 polyfill</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="第二种方式（babel-runtime）的方式："><a href="#第二种方式（babel-runtime）的方式：" class="headerlink" title="第二种方式（babel-runtime）的方式："></a>第二种方式（babel-runtime）的方式：</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev @babel<span class="token operator">/</span>plugin<span class="token operator">-</span>transform<span class="token operator">-</span>runtime
npm install <span class="token operator">--</span>save @babel<span class="token operator">/</span>runtime <span class="token comment">// 注意这里是 --save 表示会在生产环境中作为依赖被安装</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这两个插件需要配合使用，于是像这样配置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span>
        <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果这样配置，并不能解决问题，polyfill 的方法依然会污染全局，此时需要再引入 @babel&#x2F;runtime-corejs3<br>npm install @babel&#x2F;runtime-corejs3 –save<br>摘自官方的一段话，我们就知道为什么更推荐使用 core3 了<br><img src="http://cdn.pluto1811.com/1626857604731.jpg"></p>
<p>最终配置：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// babel.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">presets</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
      <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">corejs</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>
        <span class="token comment">// useBuiltIns: 'usage' 在babel7.x 版本被废除 已经默认配置了</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ol>
<li><p><strong>Q:</strong> 如果同时配置 presets 中 corejs：3 和 @babel&#x2F;plugin-transform-runtime 中的 corejs：3 有什么影响？<br><strong>A:</strong> 几乎没什么影响，猜测与 babel 转译顺序有关，babel 的 plugin 比 prset 要先执行，preset-env 得到的是 @babel&#x2F;runtime 使用帮助函数包装后的代码，里面已经什么需要转译的部分了。</p>
</li>
<li><p><strong>Q:</strong> 给 @babel&#x2F;plugin-transform-runtime 配置 corejs 是否真的如此的完美，既可以将帮助函数变成引用的形式，又可以动态引入 polyfill，并且不会污染全局环境。<br><strong>A:</strong> @babel&#x2F;plugin-transform-runtime 包本身 体积会比 @babel&#x2F;preset-env 要大</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>闭包和执行上下文到底是怎么回事？</title>
    <url>/pluto/2022/09/22/clusure/</url>
    <content><![CDATA[<h1 id="show-me-the-code："><a href="#show-me-the-code：" class="headerlink" title="show me the code："></a>show me the code：</h1><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token function">fn</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 'zhangsan' 20</span>
<span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里报错</span>
<span class="token comment">// Uncaught ReferenceError: b is not defined</span>
b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以一段代码开头引出 js 的执行上下文</p>
<h3 id="什么是-js-的执行上下文"><a href="#什么是-js-的执行上下文" class="headerlink" title="什么是 js 的执行上下文"></a>什么是 js 的执行上下文</h3><p>js 是解释执行的脚本语言</p>
<p>解析的时候会先创建一个全局执行上下文，先把代码中即将执行的（内部函数的不算，因为你不知道函数何时执行）变量、函数声明都拿出来，变量先暂时赋值为 undefined，函数先声明好可使用，然后再开始正式执行程序</p>
<h4 id="总结一下：在-ES5-中，可分为下面-3-部分"><a href="#总结一下：在-ES5-中，可分为下面-3-部分" class="headerlink" title="总结一下：在 ES5 中，可分为下面 3 部分"></a>总结一下：在 ES5 中，可分为下面 3 部分</h4><ul>
<li>词法环境，当获取变量时使用。</li>
<li>变量环境，当声明变量时使用。</li>
<li>this 值。</li>
</ul>
<p>在执行一个函数时，也会创建一个函数执行上下文，跟全局上下文差不多，不过函数执行上下文会多出 this,arguments 和函数参数。</p>
<p>稍微延伸下函数的参数：</p>
<ul>
<li>形参</li>
<li>函数的形参是定义该函数时，设置的函数参数个数</li>
<li>实参</li>
<li>调用函数时传递几个就是有几个</li>
</ul>
<p>函数的实参会放在 arguments 中，argumens 是一个类数组，而非对象（arguments instanceof Array &#x3D;&#x3D;&#x3D; false）</p>
<p>一段关于 argumens 的骚操作：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h3><p>this 的值是在执行的时候才能确认，定义的时候不能确认！因为 this 是执行上下文环境的一部分，而执行上下文需要在代码执行之前确定，而不是定义的时候</p>
<h4 id="1-默认指向（如果是严格模式，this-指向-undefined；非严格模式，则是全局对象，如在浏览器中指向-window）"><a href="#1-默认指向（如果是严格模式，this-指向-undefined；非严格模式，则是全局对象，如在浏览器中指向-window）" class="headerlink" title="1. 默认指向（如果是严格模式，this 指向 undefined；非严格模式，则是全局对象，如在浏览器中指向 window）"></a>1. 默认指向（如果是严格模式，this 指向 undefined；非严格模式，则是全局对象，如在浏览器中指向 window）</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-隐含指向"><a href="#2-隐含指向" class="headerlink" title="2. 隐含指向"></a>2. 隐含指向</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> foo <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token comment">// 上例中，函数 foo() 调用时，前置了一个环境对象 obj，那么此时 foo 中的 this 就会指向它的环境对象 obj。</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">obj</span><span class="token operator">:</span> obj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj2<span class="token punctuation">.</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token comment">// 如果时这种情况，则 this 指向引用链的最后一层，即obj</span>

<span class="token comment">// this 也会隐含的“丢失”，如下面三种情况</span>
<span class="token comment">// 第一种</span>
<span class="token keyword">var</span> foo1 <span class="token operator">=</span> obj<span class="token punctuation">.</span>foo<span class="token punctuation">;</span>
<span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// 牢记函数的this绑定是函数被调用时确定的，foo1 执行时，只是一个直白，无修饰的调用，此时符合默认指向规则。</span>

<span class="token comment">//第二种</span>
<span class="token keyword">function</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">go</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// go 传入的实参 obj.foo 只是赋值给了形参 fn，本质上就是 fn = obj.foo，然后 fn() 。它和第一种是类似的。</span>

<span class="token comment">// 第三种</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>foo<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token comment">// 本质上，这个this指向的过程，类似于第二种。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="3-明朗指向"><a href="#3-明朗指向" class="headerlink" title="3. 明朗指向"></a>3. 明朗指向</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 ; calll 和 apply 类似，不再赘述。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="4-new-指向"><a href="#4-new-指向" class="headerlink" title="4. new 指向"></a>4. new 指向</h4><p>延伸一下&#x3D;&gt;new 的时候发生了什么：</p>
<blockquote>
<ul>
<li>一个全新的对象（暂且叫它 myObj 吧）被凭空创建。</li>
<li>myObj 被接入被调用函数的原型链。</li>
<li>函数中的 this 指向 myObj</li>
<li>返回这个 myObj</li>
</ul>
</blockquote>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="箭头函数-this-的指向"><a href="#箭头函数-this-的指向" class="headerlink" title="箭头函数 this 的指向"></a>箭头函数 this 的指向</h3><hr>
<h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><ul>
<li>不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。</li>
<li>不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 Rest 参数代替。</li>
<li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</li>
<li>本身没有 this，它会直接绑定到它的词法作用域内的 this，也就是定义它时的作用域内的 this 值</li>
<li>一旦指向确定，就无法被覆盖</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token function-variable function">y</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出22</span>

<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

obj<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p><strong>1. 定义：</strong> 红皮书+作者自己的理解：</p>
<p>有权限访问另一个函数作用域中的变量的函数，保护该变量不被 GC 回收，并不是说一定要 return 出去，函数可以访问被创建时所处的上下文环境，强调的是访问外部函数的局部变量。</p>
<p><strong>2. 原理：</strong></p>
<ul>
<li>作用域链</li>
<li>自由变量 &#x3D;&gt; 当前作用域没有定义的变量，这成为 自由变量 。自由变量如何得到 —— 向父级作用域寻找<br>如果父级也没呢？再一层一层向上寻找，直到找到全局作用域还是没找到，就宣布放弃。这种一层一层的关系，就是 作用域链 。</li>
<li>垃圾(内存)回收机制</li>
<li>一般情况一个函数（函数作用域）执行完毕，里面声明的变量会全部释放，被垃圾回收器回收，而闭包不会被垃圾回收，会一直存在内存。</li>
<li>全局变量生命周期会持续到浏览器关闭页面</li>
</ul>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token operator">++</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一道经典的面试题：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>button<span class="token operator">></span>Button0<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button<span class="token operator">></span>Button1<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button<span class="token operator">></span>Button2<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button<span class="token operator">></span>Button3<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
  <span class="token operator">&lt;</span>button<span class="token operator">></span>Button4<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 输出的都是4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>解题思路：</strong></p>
<blockquote>
<ol>
<li>由 var 申明的变量，会造成变量提升，每次循环其实操作的是同一个变量；</li>
<li>onlick 事件函数顺着作用域链从内向外查找变量 i</li>
<li>onclick 事件是被异步触发的，当事件被触发时，for 循环早已结束，此时变量 i 的值已经是 5</li>
</ol>
</blockquote>
<p>方案一：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    btns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">alert</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>for 循环每一次都执行一个 IIEF （自执行函数），每一次变量 i 被当做参数传到 IIEF 中去 ， 那么这个自执行函数中创建了一个变量，参数 j 然后元素节点 btnList 绑定一个 onclick 事件，执行函数里面需要用到这个参数 j ，但是你又没点 ， 那么这个遍历 j 就没有被清理 ， 就一直在参数里面被保存着 ， 每一个 IIEF 都做一样的事情 ， 所以这个时候就产生了闭包 ， 变量 j 并没有被回收，依然在等待你使用</p>
<p>方案二：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// let块级作用域，每次循环操作的其实是不同的i。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>除了属性和选择器，你还需要知道这些带@的规则</title>
    <url>/pluto/2022/09/15/css-selector/</url>
    <content><![CDATA[<p>CSS 是前端工程师几乎每天都要用的技术了，不过 CSS 的学习资料却是最糟糕的，这是因为 CSS 并没有像 HTML 和 JavaScript 那样的一份标准文档。</p>
<p>如果我们到 W3C 的网站上搜索看看，可以得到一些信息：</p>
<p><a href="https://www.w3.org/TR/?title=css">https://www.w3.org/TR/?title=css</a></p>
<p>在这里，我们一共看到了 98 份 CSS 相关的标准，它们各自从一些角度规定了 CSS 的特性。</p>
<p>在这样的需求下，我找到的线索就是 CSS 语法，任何 CSS 的特性都必须通过一定的语法结构表达出来，所以语法可以帮助我们发现大多数 CSS 特性。</p>
<p>CSS 语法的最新标准，你可以戳这里查看：</p>
<p><a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></p>
<p>这篇文档的阅读体验其实是非常糟糕的，它对 CSS 语法的描述使用了类似 LL 语法分析的伪代码，而且没有描述任何具体的规则。</p>
<p>我们拿到这份标准可以看到，去除空格、HTML 注释等无效信息，<strong>CSS 的顶层样式表由两种规则组成的规则列表构成，一种被称为 at-rule，也就是 at 规则，另一种是 qualified rule，也就是普通规则。</strong></p>
<p>at-rule 由一个 @ 关键字和后续的一个区块组成，如果没有区块，则以分号结束。这些 at-rule 在开发中使用机会远远小于普通的规则，所以它的大部分内容，你可能会感觉很陌生。</p>
<p>这些 at 规则正是掌握 CSS 的一些高级特性所必须的内容。qualified rule 则是指普通的 CSS 规则，也就是我们所熟识的，由选择器和属性指定构成的规则。</p>
<h4 id="at-规则"><a href="#at-规则" class="headerlink" title="at 规则"></a>at 规则</h4><p>从所有的 CSS 标准里找到所有可能的 at-rule（不用谢，我已经帮你找好了，如果页面定位不准，你可以打开页面搜索关键字）。</p>
<ul>
<li>@charset ： <a href="https://www.w3.org/TR/css-syntax-3/">https://www.w3.org/TR/css-syntax-3/</a></li>
<li>@import ：<a href="https://www.w3.org/TR/css-cascade-4/">https://www.w3.org/TR/css-cascade-4/</a></li>
<li>@media ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>
<li>@page ： <a href="https://www.w3.org/TR/css-page-3/">https://www.w3.org/TR/css-page-3/</a></li>
<li>@counter-style ：<a href="https://www.w3.org/TR/css-counter-styles-3">https://www.w3.org/TR/css-counter-styles-3</a></li>
<li>@keyframes ：<a href="https://www.w3.org/TR/css-animations-1/">https://www.w3.org/TR/css-animations-1/</a></li>
<li>@fontface ：<a href="https://www.w3.org/TR/css-fonts-3/">https://www.w3.org/TR/css-fonts-3/</a></li>
<li>@supports ：<a href="https://www.w3.org/TR/css3-conditional/">https://www.w3.org/TR/css3-conditional/</a></li>
<li>@namespace ：<a href="https://www.w3.org/TR/css-namespaces-3/">https://www.w3.org/TR/css-namespaces-3/</a></li>
</ul>
<h4 id="charset"><a href="#charset" class="headerlink" title="@charset"></a>@charset</h4><p>@charset 用于提示 CSS 文件使用的字符编码方式，它如果被使用，必须出现在最前面。这个规则只在给出语法解析阶段前使用，并不影响页面上的展示效果。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@charset</span> <span class="token string">"utf-8"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h4><p>@import 用于引入一个 CSS 文件，除了 @charset 规则不会被引入，@import 可以引入另一个文件的全部内容。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mystyle.css"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"mystyle.css"</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> [ &lt;url> | &lt;string>] [ <span class="token function">supports</span><span class="token punctuation">(</span>
    [ &lt;supports-condition> | &lt;declaration>]
  <span class="token punctuation">)</span>]? &lt;media-query-list>?<span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>通过代码，我们可以看出，import 还支持 supports 和 media query 形式。</p>
<h3 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h3><p>media 就是大名鼎鼎的 media query 使用的规则了，它能够对设备的类型进行一些判断。在 media 的区块内，是普通规则列表。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> 10pt<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="page"><a href="#page" class="headerlink" title="@page"></a>@page</h3><p>page 用于分页媒体访问网页时的表现设置，页面是一种特殊的盒模型结构，除了页面本身，还可以设置它周围的盒。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">&#123;</span>
  <span class="token property">size</span><span class="token punctuation">:</span> 8.5in 11in<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 10%<span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@top-left</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Hamlet"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token atrule"><span class="token rule">@top-right</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"Page "</span> <span class="token function">counter</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="counter-style"><a href="#counter-style" class="headerlink" title="@counter-style"></a>@counter-style</h3><p>counter-style 产生一种数据，用于定义列表项的表现。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@counter-style</span> triangle</span> <span class="token punctuation">&#123;</span>
  <span class="token property">system</span><span class="token punctuation">:</span> cyclic<span class="token punctuation">;</span>
  <span class="token property">symbols</span><span class="token punctuation">:</span> ‣<span class="token punctuation">;</span>
  <span class="token property">suffix</span><span class="token punctuation">:</span> <span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="key-frames"><a href="#key-frames" class="headerlink" title="@key-frames"></a>@key-frames</h3><p>keyframes 产生一种数据，用于定义动画关键帧。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> diagonal-slide</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">from</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">to</span> <span class="token punctuation">&#123;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="fontface"><a href="#fontface" class="headerlink" title="@fontface"></a>@fontface</h3><p>fontface 用于定义一种字体，icon font 技术就是利用这个特性来实现的。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> Gentium<span class="token punctuation">;</span>
  <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://example.com/fonts/Gentium.woff<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">p</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> Gentium<span class="token punctuation">,</span> serif<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="support"><a href="#support" class="headerlink" title="@support"></a>@support</h3><p>support 检查环境的特性，它与 media 比较类似。</p>
<h3 id="namespace"><a href="#namespace" class="headerlink" title="@namespace"></a>@namespace</h3><p>用于跟 XML 命名空间配合的一个规则，表示内部的 CSS 选择器全都带上特定命名空间。</p>
<h3 id="viewport"><a href="#viewport" class="headerlink" title="@viewport"></a>@viewport</h3><p>用于设置视口的一些特性，不过兼容性目前不是很好，多数时候被 html 的 meta 代替。</p>
<h3 id="普通规则"><a href="#普通规则" class="headerlink" title="普通规则"></a>普通规则</h3><p>接下来我们进入 qualified rule，也就是普通规则的部分，看看这里有什么需要我们记住的内容。</p>
<p>qualified rule 主要是由选择器和声明区块构成。声明区块又由属性和值构成。我在下面的列表中，介绍了这部分语法的组成要点。</p>
<ul>
<li>普通规则</li>
<li>选择器</li>
<li>声明列表<ul>
<li>属性</li>
<li>值<ul>
<li>值的类型</li>
<li>函数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>我们先来看看选择器，它有一份独立的标准，我们可以参考这个网址：</p>
<p><a href="https://www.w3.org/TR/selectors-4/">https://www.w3.org/TR/selectors-4/</a></p>
<p>我们从语法结构可以看出，任何选择器，都是由几个符号结构连接的：空格、大于号、加号、波浪线、双竖线，这里需要注意一下，空格，即为后代选择器的优先级较低。</p>
<p>然后对每一个选择器来说，如果它不是伪元素的话，由几个可选的部分组成，标签类型选择器，id、class、属性和伪类，它们中只要出现一个，就构成了选择器。</p>
<p>如果它是伪元素，则在这个结构之后追加伪元素。只有伪类可以出现在伪元素之后。我在下面用一个列表（不太严谨地）整理了选择器的语法结构：<br><img src="http://cdn.pluto1811.com/forEditor/1615431822373/article-20.png" alt="article-20.png"></p>
<p>我们在这里可以参考一个示例图：</p>
<p><img src="http://cdn.pluto1811.com/forEditor/1615431862821/article-21.png" alt="article-21.png"></p>
<h3 id="声明：属性和值"><a href="#声明：属性和值" class="headerlink" title="声明：属性和值"></a>声明：属性和值</h3><p>声明部分是一个由“属性: 值”组成的序列。</p>
<p><strong>属性</strong>是由中划线、下划线、字母等组成的标识符，CSS 还支持使用反斜杠转义。我们需要注意的是：属性不允许使用连续的两个中划线开头，这样的属性会被认为是 CSS 变量。</p>
<p>在 CSS Variables 标准中，以双中划线开头的属性被当作变量，与之配合的则是 var 函数：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">:root</span> <span class="token punctuation">&#123;</span>
  <span class="token property">--main-color</span><span class="token punctuation">:</span> #06c<span class="token punctuation">;</span>
  <span class="token property">--accent-color</span><span class="token punctuation">:</span> #006<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/* The rest of the CSS file */</span>
<span class="token selector">#foo h1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--main-color<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>值</strong>的部分，主要在标准 CSS Values and Unit，根据每个 CSS 属性可以取到不同的值，这里的值可能是字符串、标识符。</p>
<p>CSS 属性值可能是以下类型。</p>
<ul>
<li>CSS 范围的关键字：initial，unset，inherit，任何属性都可以的关键字。</li>
<li>字符串：比如 content 属性。</li>
<li>URL：使用 url() 函数的 URL 值。</li>
<li>整数 &#x2F; 实数：比如 flex 属性。</li>
<li>维度：单位的整数 &#x2F; 实数，比如 width 属性。</li>
<li>百分比：大部分维度都支持。</li>
<li>颜色：比如 background-color 属性。</li>
<li>图片：比如 background-image 属性。</li>
<li>2D 位置：比如 background-position 属性。</li>
<li>函数：来自函数的值，比如 transform 属性。</li>
</ul>
<p>这里我们要重点介绍一下函数。一些属性会要求产生函数类型的值，比如 easing-function 会要求 cubic-bezier() 函数的值：</p>
<p>CSS 支持一批特定的计算型函数：</p>
<ul>
<li>calc()</li>
<li>max()</li>
<li>min()</li>
<li>clamp()</li>
<li>toggle()</li>
<li>attr()</li>
</ul>
<p>calc()函数是基本的表达式计算，它支持加减乘除四则运算。在针对维度进行计算时，calc() 函数允许不同单位混合运算，这非常的有用。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">section</span> <span class="token punctuation">&#123;</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 1em<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid 1px<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100% / 3 - 2 * 1em - 2 * 1px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>max()、min() 和 clamp()则是一些比较大小的函数，max() 表示取两数中较大的一个，min() 表示取两数之中较小的一个，clamp() 则是给一个值限定一个范围，超出范围外则使用范围的最大或者最小值。</p>
<p>toggle() 函数在规则选中多于一个元素时生效，它会在几个值之间来回切换，比如我们要让一个列表项的样式圆点和方点间隔出现，可以使用下面代码：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">ul</span> <span class="token punctuation">&#123;</span>
  <span class="token property">list-style-type</span><span class="token punctuation">:</span> <span class="token function">toggle</span><span class="token punctuation">(</span>circle<span class="token punctuation">,</span> square<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>attr() 函数允许 CSS 接受属性值的控制。</p>
]]></content>
  </entry>
  <entry>
    <title>gerrit代码审查工具</title>
    <url>/pluto/2022/10/15/gerrit/</url>
    <content><![CDATA[<img src="http://cdn.pluto1811.com/20221027100713.png"/>

<img src="http://cdn.pluto1811.com/20221027101028.png"/>

<img src="http://cdn.pluto1811.com/20221027103343.png"/>

<img src="http://cdn.pluto1811.com/20221027103428.png"/>

<img src="http://cdn.pluto1811.com/20221027103450.png"/>

<img src="http://cdn.pluto1811.com/20221027103450.png"/>

<img src="http://cdn.pluto1811.com/20221027103720.png"/>

<img src="http://cdn.pluto1811.com/20221027103622.png"/>

<img src="http://cdn.pluto1811.com/20221027103811.png"/>

<img src="http://cdn.pluto1811.com/20221027103857.png"/>

<img src="http://cdn.pluto1811.com/20221027105137.png"/>

<img src="http://cdn.pluto1811.com/20221027105416.png"/>

<img src="http://cdn.pluto1811.com/20221027105505.png"/>

<img src="http://cdn.pluto1811.com/20221027105528.png"/>

<img src="http://cdn.pluto1811.com/20221027105602.png"/>

<img src="http://cdn.pluto1811.com/20221027105628.png"/>

<img src="http://cdn.pluto1811.com/20221027105702.png"/>

<img src="http://cdn.pluto1811.com/20221027110015.png"/>

<img src="http://cdn.pluto1811.com/20221027110032.png"/>

<h3 id="使用注意："><a href="#使用注意：" class="headerlink" title="使用注意："></a>使用注意：</h3><ol>
<li>git config –global alias.cr ‘!git push review HEAD:refs&#x2F;for&#x2F;$(git rev-parse –abbrev-ref HEAD)’<br>执行这条命令，可以简化推送的命令，有些小伙伴还没配置</li>
<li>同一个 commit，在做了 fix 之后，要执行<br>git add .<br>git commit –amend –no-edit<br>不要让一个 commit，产生 2 个 reivew ID</li>
<li>提了 comments，修复之后，点了 DONE，还要点 REPLAY，弹框会有个 pushlish，这样你的回复，reviewer 的人才看得到</li>
<li>git push review 这条命令仅用于切换了新分支后使用，一个功能分支生命周期内只能执行一次 git push review</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>你知道head里一共能写哪几种标签吗？</title>
    <url>/pluto/2022/09/09/headtag/</url>
    <content><![CDATA[<p>先来了解一下什么是元信息类标签。所谓元信息，是指描述自身的信息，元信息类标签，就是 HTML 用于描述文档自身的一类标签，它们通常出现在 head 标签中，一般都不会在页面被显示出来（与此相对，其它标签，如语义类标签，描述的是业务）。</p>
<p>元信息多数情况下是给浏览器、搜索引擎等机器阅读的，有时候这些信息会在页面之外显示给用户，有时候则不会。</p>
<h3 id="head-标签"><a href="#head-标签" class="headerlink" title="head 标签"></a>head 标签</h3><p>首先我们先来了解一下 head 标签，head 标签本身并不携带任何信息，它主要是作为盛放其它语义类标签的容器使用。</p>
<p>head 标签规定了自身必须是 html 标签中的第一个标签，它的内容必须包含一个 title，并且最多只能包含一个 base。如果文档作为 iframe，或者有其他方式指定了文档标题时，可以允许不包含 title 标签。</p>
<h3 id="title-标签"><a href="#title-标签" class="headerlink" title="title 标签"></a>title 标签</h3><p>title 标签表示文档的标题，从字面上就非常容易理解。</p>
<p>你还记得吗，我们的语义类标签中也有一组表示标题的标签：h1-h6。</p>
<p>heading 和 title 两个英文单词意义区分十分微妙，在中文中更是找不到对应的词汇来区分。但是实际使用中，两者确实有一定区别。</p>
<p>在 HTML 标准中，特意讨论了这个问题。我们思考一下，假设有一个介绍蜜蜂跳舞求偶仪式的科普页面，我们试着把以下两个文字分别对应到 title 和 h1。</p>
<ul>
<li>蜜蜂求偶仪式舞蹈</li>
<li>舞蹈</li>
</ul>
<p>思考之后，我们来看看正确答案。正确答案是“蜜蜂求偶仪式舞蹈”放入 title，“舞蹈”放入 h1。</p>
<p>这主要是考虑到 title 作为元信息，可能会被用在浏览器收藏夹、微信推送卡片、微博等各种场景，这时侯往往是上下文缺失的，所以 title 应该是完整地概括整个网页内容的。</p>
<p>而 h1 则仅仅用于页面展示，它可以默认具有上下文，并且有链接辅助，所以可以简写，即便无法概括全文，也不会有很大的影响。</p>
<h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>base 标签实际上是个历史遗留标签。它的作用是给页面上所有的 URL 相对地址提供一个基础。</p>
<p>base 标签最多只有一个，它改变全局的链接地址，它是一个非常危险的标签，容易造成跟 JavaScript 的配合问题，所以在实际开发中，我比较建议你使用 JavaScript 来代替 base 标签。</p>
<h3 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h3><p>meta 标签是一组键值对，它是一种通用的元信息表示标签。</p>
<p>在 head 中可以出现任意多个 meta 标签。一般的 meta 标签由 name 和 content 两个属性来定义。name 表示元信息的名，content 则用于表示元信息的值。</p>
<p>它基本用法是下面这样的，你也可以自己动手尝试一下：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application-name<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lsForums<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个标签表示页面所在的 web-application，名为 IsForums。</p>
<p>这里的 name 是一种比较自由的约定，http 标准规定了一些 name 作为大家使用的共识，也鼓励大家发明自己的 name 来使用。</p>
<p>除了基本用法，meta 标签还有一些变体，主要用于简化书写方式或者声明自动化行为。下面我就挑几种重点的内容来分别讲解一下。</p>
<h4 id="具有-charset-属性的-meta"><a href="#具有-charset-属性的-meta" class="headerlink" title="具有 charset 属性的 meta"></a>具有 charset 属性的 meta</h4><p>从 HTML5 开始，为了简化写法，meta 标签新增了 charset 属性。添加了 charset 属性的 meta 标签无需再有 name 和 content。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>charset 型 meta 标签非常关键，它描述了 HTML 文档自身的编码形式。因此，我建议这个标签放在 head 的第一个。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    ……
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，浏览器读到这个标签之前，处理的所有字符都是 ASCII 字符，众所周知，ASCII 字符是 UTF-8 和绝大多数字符编码的子集，所以，在读到 meta 之前，浏览器把文档理解多数编码格式都不会出错，这样可以最大限度地保证不出现乱码。</p>
<p>一般情况下，http 服务端会通过 http 头来指定正确的编码方式，但是有些特殊的情况如使用 file 协议打开一个 HTML 文件，则没有 http 头，这种时候，charset meta 就非常重要了。</p>
<h4 id="具有-http-equiv-属性的-meta"><a href="#具有-http-equiv-属性的-meta" class="headerlink" title="具有 http-equiv 属性的 meta"></a>具有 http-equiv 属性的 meta</h4><p>具有 http-equiv 属性的 meta 标签，表示执行一个命令，这样的 meta 标签可以不需要 name 属性了。</p>
<p>例如，下面一段代码，相当于添加了 content-type 这个 http 头，并且指定了 http 编码方式。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/html; charset=UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>除了 content-type，还有以下几种命令：</p>
<ul>
<li>content-language 指定内容的语言；</li>
<li>default-style 指定默认样式表；</li>
<li>refresh 刷新；</li>
<li>set-cookie 模拟 http 头 set-cookie，设置 cookie；</li>
<li>x-ua-compatible 模拟 http 头 x-ua-compatible，声明 ua 兼容性；</li>
<li>content-security-policy 模拟 http 头 content-security-policy，声明内容安全策略。</li>
</ul>
<h4 id="name-为-viewport-的-meta"><a href="#name-为-viewport-的-meta" class="headerlink" title="name 为 viewport 的 meta"></a>name 为 viewport 的 meta</h4><p>实际上，meta 标签可以被自由定义，只要写入和读取的双方约定好 name 和 content 的格式就可以了。</p>
<p>我们来介绍一个 meta 类型，它没有在 HTML 标准中定义，却是移动端开发的事实标准：它就是 name 为 viewport 的 meta。</p>
<p>这类 meta 的 name 属性为 viewport，它的 content 是一个复杂结构，是用逗号分隔的键值对，键值对的格式是 key&#x3D;value。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=500, initial-scale=1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里只指定了两个属性，宽度和缩放，实际上 viewport 能控制的更多，它能表示的全部属性如下：</p>
<ul>
<li>width：页面宽度，可以取值具体的数字，也可以是 device-width，表示跟设备宽度相等。</li>
<li>height：页面高度，可以取值具体的数字，也可以是 device-height，表示跟设备高度相等。</li>
<li>initial-scale：初始缩放比例。</li>
<li>minimum-scale：最小缩放比例。</li>
<li>maximum-scale：最大缩放比例。</li>
<li>user-scalable：是否允许用户缩放。<br>对于已经做好了移动端适配的网页，应该把用户缩放功能禁止掉，宽度设为设备宽度，一个标准的 meta 如下：</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>
  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no<span class="token punctuation">"</span></span>
<span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="其它预定义的-meta"><a href="#其它预定义的-meta" class="headerlink" title="其它预定义的 meta"></a>其它预定义的 meta</h4><p>在 HTML 标准中，还定义了一批 meta 标签的 name，可以视为一种有约定的 meta，我在这里列出来，你可以简单了解一下。</p>
<p>application-name：如果页面是 Web application，用这个标签表示应用名称。</p>
<ul>
<li>author: 页面作者。</li>
<li>description：页面描述，这个属性可能被用于搜索引擎或者其它场合。</li>
<li>generator: 生成页面所使用的工具，主要用于可视化编辑器，如果是手写 HTML 的网页，不需要加这个 meta。</li>
<li>keywords: 页面关键字，对于 SEO 场景非常关键。</li>
<li>referrer: 跳转策略，是一种安全考量。</li>
<li>theme-color: 页面风格颜色，实际并不会影响页面，但是浏览器可能据此调整页面之外的 UI（如窗口边框或者 tab 的颜色）。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>【超实用】完美实现基于hexo的博客网站自动化部署</title>
    <url>/pluto/2022/10/19/hexo-ci/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一名程序员到底有没有必要写技术博文？一千个读者眼中就会有一千个哈姆雷特，反对的人可能会说：没时间写、写了也没人看。。。我试着站在乐观的角度解答这个问题。先说结论：很有必要。</p>
<ol>
<li>温故而知新，写博文就是一个对知识体系回顾的过程。不是常有人抱怨说，新学的技术没过两天就忘了吗？试着写博文就是一个很好的记忆方式。</li>
<li>写得过程就是一种对技术严谨的态度的升华。写博文心态上会发生变化，不会那么随意。为了保证知识点尽量准确，期间会查阅各种资料，其实是在补齐自己的短板。</li>
<li>无形之中锻炼了自己的文笔，可能又有杠精出来说：程序员要文笔干嘛？文笔又不能修复 bug😁。事实上，任何一种技能都是有用的，只是看是否适合自己，如果有一种方式既可以巩固知识又可以锻炼文笔，何乐而不为呢？</li>
</ol>
<h3 id="选择博客框架"><a href="#选择博客框架" class="headerlink" title="选择博客框架"></a>选择博客框架</h3><p>既然想着写博客没有一个合适的工具怎么可以呢？关于博客框架有很多，比如：<a href="https://b3log.org/solo/" target="_blank">Solo</a>、<a href="https://blog.getpelican.com/" target="_blank">pelican</a>、<a href="https://hexo.io/zh-cn/" target="_blank">Hexo</a>、<a href="https://jekyllrb.com/" target="_blank">Jekyll</a> 等等。笔者这里选择的是 Hexo。主要是因为：</p>
<ol>
<li>使用 Markdown 解析文章，只需要几秒，就能生成一个靓丽的静态网页；</li>
<li>官网支持中文，打开官方文档，有详细地使用说明，一行代码安装搞定 npm install -g hexo-cli；</li>
<li>同时兼容 Window Mac Linux，做到真正的跨平台；</li>
<li>拥有丰富的插件和主题。</li>
</ol>
<h3 id="超高性价比的部署方式"><a href="#超高性价比的部署方式" class="headerlink" title="超高性价比的部署方式"></a>超高性价比的部署方式</h3><p>博客网站一般部署在自有云服务器、github、gitee 等，首先我们这里先排除掉云服务器（因为要给钱啊 😁），另外由于某些特殊原因，github 有时候会抽风，并且速度也不咋地。综上考虑，把我们的博客部署在 gitee pages 上是最具性价比的。</p>
<h4 id="初始化-hexo-项目"><a href="#初始化-hexo-项目" class="headerlink" title="初始化 hexo 项目"></a>初始化 hexo 项目</h4><p>这个过程简直不要太简单，各位可以看看 <a href="https://hexo.io/zh-cn/docs/" target="_blank">官网</a>，这里只说一下安装命令：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g hexo<span class="token operator">-</span>cli

<span class="token comment">// 新建博客</span>
hexo init <span class="token operator">&lt;</span>your blog name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="搭建-gitee-pages"><a href="#搭建-gitee-pages" class="headerlink" title="搭建 gitee pages"></a>搭建 gitee pages</h4><p>gitee pages 这个功能需要实名认证，这里不得不吐槽下 gitee 相关审核工作，进度实在太慢了，虽然官网说的是 1-2 个工作日，但我当时审核时间大概有一个星期左右。</p>
<ol>
<li><p>快速创建一个仓库，成功后将仓库设置成开源</p>
<img src="http://cdn.pluto1811.com/20221019175110.png"/>
</li>
<li><p>安装 hexo-deployer-git</p>
</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li>配置 _config.yml</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> 远程地址
  <span class="token key atrule">token</span><span class="token punctuation">:</span> gitee 私人令牌
  <span class="token key atrule">name</span><span class="token punctuation">:</span> 登录用户名
  <span class="token key atrule">email</span><span class="token punctuation">:</span> 关联邮箱
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
  <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>生成 gitee 私人令牌<img src="http://cdn.pluto1811.com/20221019180205.png"/></li>
</ol>
<p>这里需要注意，令牌一旦生成后续不可查看，需要在生成时及时复制，填充至上面配置的 token 字段中。</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>至此，我们其实已经可以部署我们博客了，步骤如下：</p>
<ol>
<li>本地运行</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> run deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>在 gitee pages 中点击更新<img src="http://cdn.pluto1811.com/20221019182656.png"/></li>
</ol>
<p>但是作为一名合格的程序员，怎么能允许有这么繁琐的操作呢？接下来，我们看看如何自动化部署。</p>
<h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><p>首先我们期望的是，只要我们本地提交至远程，那么就需要触发 gitee pages 进行更新。但遗憾的是目前 gitee 除非开启我们的“钞能力”😁，否则是没法使用 web hooks 的，但 github 可以免费使用这个功能。因此这里我们需要：</p>
<ol>
<li>github 提供的 web hooks，一旦我们提交至远程，使用 <a href="">yanglbme&#x2F;gitee-pages-action@main</a> 触发 gitee pages 更新；</li>
<li>在 push 之前，我们需要执行本地的 deploy 操作，将文章推送到 gitee pages 上；</li>
</ol>
<h4 id="编写-github-work-flows-脚本"><a href="#编写-github-work-flows-脚本" class="headerlink" title="编写 github work flows 脚本"></a>编写 github work flows 脚本</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Sync To Gitee

<span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> delete<span class="token punctuation">,</span> create<span class="token punctuation">]</span>

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">pages</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build Gitee Pages
        <span class="token key atrule">uses</span><span class="token punctuation">:</span> yanglbme/gitee<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>action@main
        <span class="token key atrule">with</span><span class="token punctuation">:</span>
          <span class="token comment"># 注意替换为你的 Gitee 用户名</span>
          <span class="token key atrule">gitee-username</span><span class="token punctuation">:</span> XXXX
          <span class="token comment"># 注意在 Settings->Secrets 配置 GITEE_PASSWORD</span>
          <span class="token key atrule">gitee-password</span><span class="token punctuation">:</span> $<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> secrets.GITEE_PASSWORD <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>
          <span class="token comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span>
          <span class="token key atrule">gitee-repo</span><span class="token punctuation">:</span> XXXX
          <span class="token comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span>
          <span class="token key atrule">branch</span><span class="token punctuation">:</span> XXXX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="push-之前部署我们的博客"><a href="#push-之前部署我们的博客" class="headerlink" title="push 之前部署我们的博客"></a>push 之前部署我们的博客</h4><p>这里需要用到 git hooks，首先安装</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-D</span> pre-push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后在 package.json 新增</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"pre-push"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token string">"deploy"</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>注意这里 deploy 一定要与 scripts 中的脚本执行命令保持一致</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结一下以上步骤，其实就是在我们本地 push 之前，利用 git hooks 执行部署命令，同步到了 gitee pages 上，再触发 github work flows 触发 gitee pages 的更新。另外由于我们采用这种方式部署博客，那么有一个特别注意的点：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 在 _config.yml 需要配置</span>
<span class="token key atrule">url</span><span class="token punctuation">:</span> 你的gitee pages远程地址
<span class="token key atrule">root</span><span class="token punctuation">:</span> gitee pages 根目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>但是如果我们这样配置时，会影响到我们的本地开发环境（npm run server）的运行结果。因此我们还需要区分一下 <a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" target="_blank">运行环境</a></p>
<p>在根目录下新增 _config.dev.yml 文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1
<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改 package.json 文件本地开发的脚本命令</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server --config _config.yml,_config.dev.yml"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>好了，以上就是 hexo 博客框架自动化部署的整个过程，当然，hexo 还有许多功能值得我们探索，各位快来试试吧！是真香，真免费啊！</p>
]]></content>
  </entry>
  <entry>
    <title>关于jest的TDD与BDD开发模式</title>
    <url>/pluto/2022/08/10/jest/</url>
    <content><![CDATA[<h1 id="在-react-项目中运用-jest-自动化测试框架的探索"><a href="#在-react-项目中运用-jest-自动化测试框架的探索" class="headerlink" title="在 react 项目中运用 jest 自动化测试框架的探索"></a>在 react 项目中运用 jest 自动化测试框架的探索</h1><h3 id="1-项目日益庞大后的痛点："><a href="#1-项目日益庞大后的痛点：" class="headerlink" title="1. 项目日益庞大后的痛点："></a>1. 项目日益庞大后的痛点：</h3><p>牵一发动全身，日常开发就像是在猴子掰包谷，顾此失彼。</p>
<h3 id="2-编写的代码无理可依"><a href="#2-编写的代码无理可依" class="headerlink" title="2. 编写的代码无理可依"></a>2. 编写的代码无理可依</h3><p>自己写的都不放心</p>
<p>。。。</p>
<p>因此引入自动化测试框架无疑可以给自己一剂“安心药”。</p>
<h1 id="目前流行的自动化测试框架的对比"><a href="#目前流行的自动化测试框架的对比" class="headerlink" title="目前流行的自动化测试框架的对比"></a>目前流行的自动化测试框架的对比</h1><table>
<thead>
<tr>
<th>框架</th>
<th align="left">优点</th>
<th align="left">缺点</th>
</tr>
</thead>
<tbody><tr>
<td>Mocha</td>
<td align="left">主要用于单元测试</td>
<td align="left">集成测试方面较弱</td>
</tr>
<tr>
<td>jest</td>
<td align="left">单元、集成测试都 ok，丰富的 api</td>
<td align="left">暂未发现明显缺点</td>
</tr>
</tbody></table>
<h1 id="本文主要介绍-jest"><a href="#本文主要介绍-jest" class="headerlink" title="本文主要介绍 jest"></a>本文主要介绍 jest</h1><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yarn add <span class="token operator">--</span>dev jest 或 npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev jest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意：用 create-react-app myApp 或 npx create-react-app myApp 快速创建的 react 项目 自动集成 jest；</p>
<h3 id="2-如果是-react-项目建议集成-enzyme（airbnb-出品-与-react-项目配合天衣无缝）"><a href="#2-如果是-react-项目建议集成-enzyme（airbnb-出品-与-react-项目配合天衣无缝）" class="headerlink" title="2. 如果是 react 项目建议集成 enzyme（airbnb 出品 与 react 项目配合天衣无缝）"></a>2. 如果是 react 项目建议集成 enzyme（airbnb 出品 与 react 项目配合天衣无缝）</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">yarn add <span class="token operator">--</span>dev enzyme enzyme<span class="token operator">-</span>adapter<span class="token operator">-</span>react<span class="token operator">-</span><span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="3-项目配置"><a href="#3-项目配置" class="headerlink" title="3. 项目配置"></a>3. 项目配置</h3><p>可在项目根目录新建 jest.config.js</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">module.exports = <span class="token punctuation">&#123;</span>
  roots<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/src"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 源文件</span>
  collectCoverageFrom<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.&#123;js,jsx,ts,tsx&#125;"</span><span class="token punctuation">,</span> <span class="token string">"!src/**/*.d.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 生成测试报告需要收集的文件</span>
  setupFiles<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"react-app-polyfill/jsdom"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  setupFilesAfterEnv<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"&lt;rootDir>/enzyme.config.js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 环境加载完后执行的文件，这里代表的意思是环境加载完后执行在根目录下的enzyme.config.js文件，如下：</span>
  testMatch<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 测试的文件</span>
    <span class="token string">"&lt;rootDir>/src/**/__tests__/**/*.&#123;js,jsx,ts,tsx&#125;"</span><span class="token punctuation">,</span>
    <span class="token string">"&lt;rootDir>/src/**/*.&#123;spec,test&#125;.&#123;js,jsx,ts,tsx&#125;"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  testEnvironment<span class="token operator">:</span> <span class="token string">"jsdom"</span><span class="token punctuation">,</span> <span class="token comment">// 运行的环境</span>
  testRunner<span class="token operator">:</span>
    <span class="token string">"/Users/huanglei/工作/test/react-demo/node_modules/jest-circus/runner.js"</span><span class="token punctuation">,</span>
  transform<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 转换的文件</span>
    <span class="token property">"^.+\\.(js|jsx|mjs|cjs|ts|tsx)$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/config/jest/babelTransform.js"</span><span class="token punctuation">,</span>
    <span class="token property">"^.+\\.css$"</span><span class="token operator">:</span> <span class="token string">"&lt;rootDir>/config/jest/cssTransform.js"</span><span class="token punctuation">,</span>
    <span class="token property">"^(?!.*\\.(js|jsx|mjs|cjs|ts|tsx|css|json)$)"</span><span class="token operator">:</span>
      <span class="token string">"&lt;rootDir>/config/jest/fileTransform.js"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  transformIgnorePatterns<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 忽略文件</span>
    <span class="token string">"[/\\\\]node_modules[/\\\\].+\\.(js|jsx|mjs|cjs|ts|tsx)$"</span><span class="token punctuation">,</span>
    <span class="token string">"^.+\\.module\\.(css|sass|scss)$"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  modulePaths<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  moduleNameMapper<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"^react-native$"</span><span class="token operator">:</span> <span class="token string">"react-native-web"</span><span class="token punctuation">,</span>
    <span class="token property">"^.+\\.module\\.(css|sass|scss)$"</span><span class="token operator">:</span> <span class="token string">"identity-obj-proxy"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  moduleFileExtensions<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// 文件的扩展名</span>
    <span class="token string">"web.js"</span><span class="token punctuation">,</span>
    <span class="token string">"js"</span><span class="token punctuation">,</span>
    <span class="token string">"web.ts"</span><span class="token punctuation">,</span>
    <span class="token string">"ts"</span><span class="token punctuation">,</span>
    <span class="token string">"web.tsx"</span><span class="token punctuation">,</span>
    <span class="token string">"tsx"</span><span class="token punctuation">,</span>
    <span class="token string">"json"</span><span class="token punctuation">,</span>
    <span class="token string">"web.jsx"</span><span class="token punctuation">,</span>
    <span class="token string">"jsx"</span><span class="token punctuation">,</span>
    <span class="token string">"node"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  watchPlugins<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token comment">// watch相关的插件</span>
    <span class="token string">"jest-watch-typeahead/filename"</span><span class="token punctuation">,</span>
    <span class="token string">"jest-watch-typeahead/testname"</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  resetMocks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使 enzyme 适配 react16 版本</span>
<span class="token keyword">import</span> Enzyme <span class="token keyword">from</span> <span class="token string">"enzyme"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Adapter <span class="token keyword">from</span> <span class="token string">"enzyme-adapter-react-16"</span><span class="token punctuation">;</span>

Enzyme<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">adapter</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 package.json 文件中配置测试命令</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"node scripts/start.js"</span><span class="token punctuation">,</span>
  <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"node scripts/build.js"</span><span class="token punctuation">,</span>
  <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"jest"</span>  <span class="token comment">// 或 "jest --watch" 开启监听</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="4-项目目录设计"><a href="#4-项目目录设计" class="headerlink" title="4. 项目目录设计"></a>4. 项目目录设计</h3><p>根据 TDD（单元测试）、BDD（集成测试）的相关模式，建议目录设计如下：</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">├── components             组件
|   ├──__tests__           单元测试相关
├── src                    源码目录
|   ├── pages              页面文件目录
|   |   ├── index          index 页面目录
|   |   |   ├── __tests__  集成测试相关
└── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>JavaScript对象：啥？对象还有分类？</title>
    <url>/pluto/2022/10/23/jsobject/</url>
    <content><![CDATA[<p>在浏览器环境中，我们也无法单纯依靠 JavaScript 代码实现 div 对象，只能靠 document.createElement 来创建。这也说明了 JavaScript 的对象机制并非简单的属性集合 + 原型。</p>
<h3 id="JavaScript-中的对象分类"><a href="#JavaScript-中的对象分类" class="headerlink" title="JavaScript 中的对象分类"></a>JavaScript 中的对象分类</h3><ul>
<li>宿主对象（host Objects）：由 JavaScript 宿主环境提供的对象，它们的行为完全由宿主环境决定。</li>
<li>内置对象（Built-in Objects）：由 JavaScript 语言提供的对象。</li>
<li>固有对象（Intrinsic Objects ）：由标准规定，随着 JavaScript 运行时创建而自动创建的对象实例。</li>
<li>原生对象（Native Objects）：可以由用户通过 Array、RegExp 等内置构造器或者特殊语法创建的对象。</li>
<li>普通对象（Ordinary Objects）：由{}语法、Object 构造器或者 class 关键字定义类创建的对象，它能够被原型继承。</li>
</ul>
<h4 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h4><p>JavaScript 宿主对象千奇百怪，但是前端最熟悉的无疑是浏览器环境中的宿主了。</p>
<p>在浏览器环境中，我们都知道全局对象是 window，window 上又有很多属性，如 document。</p>
<p>实际上，这个全局对象 window 上的属性，一部分来自 JavaScript 语言，一部分来自浏览器环境。</p>
<p>JavaScript 标准中规定了全局对象属性，w3c 的各种标准中规定了 Window 对象的其它属性。</p>
<p>宿主对象也分为固有的和用户可创建的两种，比如 document.createElement 就可以创建一些 dom 对象。</p>
<p>宿主也会提供一些构造器，比如我们可以使用 new Image 来创建 img 元素，这些我们会在浏览器的 API 部分详细讲解。</p>
<h4 id="内置对象·固有对象"><a href="#内置对象·固有对象" class="headerlink" title="内置对象·固有对象"></a>内置对象·固有对象</h4><p>固有对象在任何 JS 代码执行前就已经被创建出来了，它们通常扮演者类似基础库的角色。我们前面提到的“类”其实就是固有对象的一种。</p>
<h4 id="内置对象·原生对象"><a href="#内置对象·原生对象" class="headerlink" title="内置对象·原生对象"></a>内置对象·原生对象</h4><p>我们把 JavaScript 中，能够通过语言本身的构造器创建的对象称作原生对象。在 JavaScript 标准中，提供了 30 多个构造器。按照我的理解，按照不同应用场景，我把原生对象分成了以下几个种类。</p>
<p><img src="http://cdn.pluto1811.com/forEditor/1615185702106/object-01.png" alt="object-01.png"></p>
<p>通过这些构造器，我们可以用 new 运算创建新的对象，所以我们把这些对象称作原生对象。<br>几乎所有这些构造器的能力都是无法用纯 JavaScript 代码实现的，它们也无法用 class&#x2F;extend 语法来继承。</p>
<h4 id="用对象来模拟函数与构造器：函数对象与构造器对象"><a href="#用对象来模拟函数与构造器：函数对象与构造器对象" class="headerlink" title="用对象来模拟函数与构造器：函数对象与构造器对象"></a>用对象来模拟函数与构造器：函数对象与构造器对象</h4><p>在 JavaScript 中，还有一个看待对象的不同视角，这就是用对象来模拟函数和构造器。</p>
<p>事实上，JavaScript 为这一类对象预留了私有字段机制，并规定了抽象的函数对象与构造器对象的概念。</p>
<p>函数对象的定义是：具有 [[call]] 私有字段的对象，构造器对象的定义是：具有私有字段 [[construct]] 的对象。</p>
<p>JavaScript 用对象模拟函数的设计代替了一般编程语言中的函数，它们可以像其它语言的函数一样被调用、传参。任何宿主只要提供了“具有 [[call]] 私有字段的对象”，就可以被 JavaScript 函数调用语法支持。</p>
<blockquote>
<p>[[call]] 私有字段必须是一个引擎中定义的函数，需要接受 this 值和调用参数，并且会产生域的切换，这些内容，我将会在属性访问和执行过程两个章节详细讲述。</p>
</blockquote>
<p>我们可以这样说，任何对象只需要实现 [[call]]，它就是一个函数对象，可以去作为函数被调用。而如果它能实现 [[construct]]，它就是一个构造器对象，可以作为构造器被调用。</p>
<p>当然了，用户用 function 关键字创建的函数必定同时是函数和构造器。不过，它们表现出来的行为效果却并不相同。</p>
<p>对于宿主和内置对象来说，它们实现 [[call]]（作为函数被调用）和 [[construct]]（作为构造器被调用）不总是一致的。比如内置对象 Date 在作为构造器调用时产生新的对象，作为函数时，则产生字符串，见以下代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>而浏览器宿主环境中，提供的 Image 构造器，则根本不允许被作为函数调用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 抛出错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>再比如基本类型（String、Number、Boolean），它们的构造器被当作函数调用，则产生类型转换的效果。</p>
<p>值得一提的是，在 ES6 之后 &#x3D;&gt; 语法创建的函数仅仅是函数，它们无法被当作构造器使用，见以下代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>对于用户使用 function 语法或者 Function 构造器创建的对象来说，[[call]] 和 [[construct]] 行为总是相似的，它们执行同一段代码。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把 f 作为函数调用</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把 f 作为构造器调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们大致可以认为，它们 [[construct]] 的执行过程如下：</p>
<ul>
<li>以 Object.protoype 为原型创建一个新对象；</li>
<li>以新对象为 this，执行函数的 [[call]]；</li>
<li>如果 [[call]] 的返回值是对象，那么，返回这个对象，否则返回第一步创建的新对象。</li>
</ul>
<p>这样的规则造成了个有趣的现象，如果我们的构造器返回了一个新的对象，那么 new 创建的新对象就变成了一个构造函数之外完全无法访问的对象，这一定程度上可以实现“私有”。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token function-variable function">getValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">cls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//100</span>
<span class="token comment">//a 在外面永远无法访问到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="特殊行为的对象"><a href="#特殊行为的对象" class="headerlink" title="特殊行为的对象"></a>特殊行为的对象</h4><p>除了上面介绍的对象之外，在固有对象和原生对象中，有一些对象的行为跟正常对象有很大区别。</p>
<p>它们常见的下标运算（就是使用中括号或者点来做属性访问）或者设置原型跟普通对象不同，</p>
<ul>
<li>Array：Array 的 length 属性根据最大的下标自动发生变化。</li>
<li>Object.prototype：作为所有正常对象的默认原型，不能再给它设置原型了。</li>
<li>String：为了支持下标运算，String 的正整数属性访问会去字符串里查找。</li>
<li>Arguments：arguments 的非负整数型下标属性跟对应的变量联动。</li>
<li>模块的 namespace 对象：特殊的地方非常多，跟一般对象完全不一样，尽量只用于 import 吧。</li>
<li>类型数组和数组缓冲区：跟内存块相关联，下标运算比较特殊。</li>
<li>bind 后的 function：跟原来的函数相关联。</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>JavaScript类型，有可能你不知道这些细节</title>
    <url>/pluto/2022/10/16/jstyping/</url>
    <content><![CDATA[<h1 id="JavaScript-类型，有可能你不知道这些细节"><a href="#JavaScript-类型，有可能你不知道这些细节" class="headerlink" title="JavaScript 类型，有可能你不知道这些细节"></a>JavaScript 类型，有可能你不知道这些细节</h1><h3 id="1-为什么有的编程规范要求用-void-0-代替-undefined？"><a href="#1-为什么有的编程规范要求用-void-0-代替-undefined？" class="headerlink" title="1. 为什么有的编程规范要求用 void 0 代替 undefined？"></a>1. 为什么有的编程规范要求用 void 0 代替 undefined？</h3><p>Undefined 类型表示未定义，它的类型只有一个值，就是 undefined。任何变量在赋值前是 Undefined 类型、值为 undefined，一般我们可以用全局变量 undefined（就是名为运行时类型是代码实际执行过程中我们用到的类型。</p>
<p>JavaScript 的代码 <strong>undefined 是一个变量，而并非是一个关键字</strong>。undefined 在 ES5 中已经是全局对象的一个只读（read-only）属性了，它不能被重写。但是在局部作用域中，还是可以被重写的。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

  <span class="token comment">// 10 -- chrome</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="2-js-中关于无穷大的这件事！"><a href="#2-js-中关于无穷大的这件事！" class="headerlink" title="2. js 中关于无穷大的这件事！"></a>2. js 中关于无穷大的这件事！</h3><p>JavaScript 中的 Number 类型基本符合 IEEE 754-2008 规定的双精度浮点数规则，但是 JavaScript 为了表达几个额外的语言场景（比如不让除以 0 出错，而引入了无穷大的概 念），规定了几个例外情况：</p>
<blockquote>
<ul>
<li>NaN，占用了 9007199254740990，这原本是符合 IEEE 规则的数字</li>
<li>Infinity，无穷大</li>
<li>-Infinity，负无穷大</li>
</ul>
</blockquote>
<p>另外，值得注意的是，JavaScript 中有 +0 和 -0，在加法类运算中它们没有区别，但是除 法的场合则需要特别留意区分，“忘记检测除以 -0，而得到负无穷大”的情况经常会导致 错误，而区分 +0 和 -0 的方式，正是检测 1&#x2F;x 是 Infinity 还是 -Infinity。</p>
<p><strong>为什么在 JavaScript 中，0.1+0.2 不能 &#x3D;0.3：</strong></p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>实际上，这里错误的不是结论，而是比较的方法，正确的比较方法是使用 JavaScript 提供的最小精度值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> Number<span class="token punctuation">.</span><span class="token constant">EPSILON</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>检查等式左右两边差的绝对值是否小于最小精度，才是正确的比较浮点数的方法</p>
<h3 id="3-聊聊-Object"><a href="#3-聊聊-Object" class="headerlink" title="3. 聊聊 Object"></a>3. 聊聊 Object</h3><p>在 JavaScript 中，对象的定义是“属性的集合”。属性分为数据属性和访问器属性，二者 都是 key-value 结构，key 可以是字符串或者 Symbol 类型。</p>
<p>提到对象，我们必须要提到一个概念：类。</p>
<p>事实上，JavaScript 中的“类”仅仅是运行时对象的一个私有属性，而 JavaScript 中是无法自定义类型的。</p>
<p>JavaScript 中的几个基本类型，都在对象类型中有一个“亲戚”。它们是：</p>
<blockquote>
<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Symbol</li>
</ul>
</blockquote>
<p>我们必须认识到 3 与 new Number(3) 是完全不同的值，它们一个是 Number 类 型， 一个是对象类型。</p>
<p>Number、String 和 Boolean，三个构造器是两用的，当跟 new 搭配时，它们产生对象， 当直接调用时，它们表示强制类型转换。</p>
<p>Symbol 函数比较特殊，直接用 new 调用它会抛出错误，但它仍然是 Symbol 对象的构造器。</p>
<p>我们在原型上添加方法，都可以应用于基本类型，比如以下代码，在 Symbol 原型上 添加了 hello 方法，在任何 Symbol 类型变量都可以调用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Symbol</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//symbol，a 并非对象</span>
a<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//hello，有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>运算符提供了装箱操作，它会根据基础类型构造一个 临时对象，使得我们能在基础类型上调用对应对象的方法。</strong></p>
<h3 id="装箱转换"><a href="#装箱转换" class="headerlink" title="装箱转换"></a>装箱转换</h3><p>每一种基本类型 Number、String、Boolean、Symbol 在对象中都有对应的类，所谓装箱 转换，正是把基本类型转换为对应的对象，它是类型转换中一种相当重要的种类。</p>
<p>前文提到，全局的 Symbol 函数无法使用 new 来调用，但我们仍可以利用装箱机制来得到 一个 Symbol 对象，我们可以利用一个函数的 call 方法来强迫产生装箱。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">symbolObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbolObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject <span class="token keyword">instanceof</span> <span class="token class-name">Symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>装箱机制会频繁产生临时对象，在一些对性能要求较高的场景下，我们应该尽量避免对基本 类型做装箱转换。</p>
<p>使用内置的 Object 函数，我们可以在 JavaScript 代码中显式调用装箱能力。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> symbolObject <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> symbolObject<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//object</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject <span class="token keyword">instanceof</span> <span class="token class-name">Symbol</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>symbolObject<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Symbol<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每一类装箱对象皆有私有的 Class 属性，这些属性可以用 Object.prototype.toString 获 取：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> symbolObject <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>symbolObject<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//[object Symbol]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在 JavaScript 中，没有任何方法可以更改私有的 Class 属性，因此 Object.prototype.toString 是可以准确识别对象对应的基本类型的方法，它比 instanceof 更加准确。</p>
]]></content>
  </entry>
  <entry>
    <title>嗯，这两三年...2022年中总结</title>
    <url>/pluto/2022/10/25/me2022-10/</url>
    <content><![CDATA[<h3 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h3><p>四川人，慢热型，喜欢吃辣，一个非典型程序员，喜欢跟 bug 死缠烂打。^o^</p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>平时技术性的文章写得比较多，很少写这种总结或叫杂谈类的文章。虽很久之前盘算着写一篇这两三年的总结，但在真正要敲下键盘时，脑袋竟有些空白。巧了，这篇总结的时间跨度恰好是在现在的这家公司的任职时间，在这里渡过了一段快乐的时光：</p>
<blockquote>
<p>第一次正儿八经的做一条产品线的前端负责人，第一次参加公司级共创会，体验了一把一个通宵出一个项目设计方案（真快搞死人了…），第一次为了产品的使用情况去用户那里沉浸式的体验两天，每天都在叫他点点点，再说说使用感受，估计客户都快被我整疯了，在这里 say sorry 啦~， 渡过了自己 30 岁的生日（离传说中的 35 岁定律没几年了，我滴妈呀…）</p>
</blockquote>
<h4 id="技术-x2F-架构"><a href="#技术-x2F-架构" class="headerlink" title="技术&#x2F;架构"></a>技术&#x2F;架构</h4><p>刚来公司时，跟现在大多数程序员一样，没日没夜的进行业务代码的开发，<strong>crud</strong>，巴拉巴拉的…，<strong>react、umi、vue2&#x2F;3、js&#x2F;ts、taro</strong>… 都是我们常用的技术栈，但随着项目代码量不断增多，维护成本不断增大，与我们的“工头”几经讨论，决定开发出一系列具有公司特色的工具链，按使用顺序做了如下安排并一一实现：</p>
<center>
    <img src="/images/me2022-10/1691999258848.jpg" >
</center>

<blockquote>
<ul>
<li>基于 <strong>verdaccio、lerna、dumi</strong> 搭建私有组件库：bingo；</li>
<li>CI&#x2F;CD；<br>web 项目&#x2F;h5 项目： <strong>jenkins</strong> 自动化构建，一键发布；<br>微信小程序：<strong>jenkins</strong> 自动化构建打包、上传、提审；</li>
<li>代码规范：自定义 <strong>eslint&#x2F;prettier、husky&#x2F;lint-staged</strong>；<br><strong>@bingo&#x2F;qc-menber</strong> 一键生成符合公司标准的 eslint、prettier 配置（后集成到 cli 脚手架中了）</li>
<li>babel 工具；<br><strong>@bingo&#x2F;taro2-to-taro3</strong>，基于 gogocode 将 taro2.x 一键升级至 taro3.x；<br><strong>@bingo&#x2F;page-inject-decorator</strong>，为每个页面注入装饰器，解决为每个页面都引入公共组件这一繁琐的操作；</li>
<li><strong>taro</strong> 超级组件；<br><strong>@bingo&#x2F;ammo</strong>，目前已集成多个基于 taro 的组件：分片加载、图片懒加载、<br>列表组件 <strong>page-scroll-view</strong>，集成常见分页需求、元素吸顶、虚拟列表、分片加载、css 按需引入，虚拟列表性能比 taro 官方提供的虚拟列表组件性能高出 30%</li>
<li>cli 脚手架工具；<br><strong>@bingo&#x2F;cli</strong>，一键生成符合公司项目规范标准初始化项目模板：集成公共请求机制、常用组件、代码规范、打包配置。支持选择 js&#x2F;ts、scss&#x2F;less、web&#x2F;小程序&#x2F;h5</li>
<li>其他:<br>个人博客-<a href="http://pluto1811.com/">冥王星</a>, 后端：<strong>egg.js + mysql</strong>；后台管理系统：<strong>React + antd</strong>；客户端：<strong>nuxt.js + iview</strong>；说一个比较尴尬的事，当初计划的是整个系统都用 <strong>jenkins + docker</strong> 自动化部署。但由于囊中羞涩，只买了一台最低配置的云服务器（根本就扛不住 webpack 打包）&#x3D;。&#x3D; 最后只把后端做了自动化构建发布，管理系统和客户端用 <strong>node-ssh</strong> 做了一个简易的上传工具，也算做到了一键打包发布 &#x3D;。&#x3D;</li>
</ul>
</blockquote>
<p>技术分享：<br>一月一次技术分享，目前分享了《babel 探秘》《react hooks 解密》</p>
<p>我常常怀疑自己到了“懒癌晚期”（这大概也是程序员的通病），特排斥重复劳动，比如在一些时候要配合后端做微服务拆分，需要在所有项目中搜索接口，并逐一替换成拆服后的新地址，一次就是好几百个接口（眼冒金星^o^），索性写了一个 babel 插件，让程序去跑吧，既可以替换新接口同时还可以作下统计，拿着这个光明正大找后端同学索要“辛苦费”，反正跑的是代码累的也不是我（此处应该有鼓掌~）</p>
<h4 id="管理-x2F-业务"><a href="#管理-x2F-业务" class="headerlink" title="管理&#x2F;业务"></a>管理&#x2F;业务</h4><p>在公司呆了大半年后，原以为会一直当一条专搞技术的“咸鱼”，但由于公司的组织结构的调整，按业务归属不同划分了三条产品线：买家线、卖家线、基础线。在某天部门老大的“威逼利诱”之下，我去了卖家业务线做了前端组的小 Leader，至此日常工作也发生了翻天覆地的变化。</p>
<h5 id="从思维方式转变开始"><a href="#从思维方式转变开始" class="headerlink" title="从思维方式转变开始"></a>从思维方式转变开始</h5><p>之前的工作状态是“两耳不闻窗外事，一心只把代码敲”，我只需要对我的功能和代码负责。坦白来讲，现在也多少能体会有些人为什么愿意一心只扑在技术上，而对于与人打交道的事总是望而却步。代码是工具，不同人写出来也只是精致与粗糙的区别，代码好坏完全在于个人技术水平高低。而管理需要的是同理心，责任与担当，更关注的是工作的结果和价值，但现在需要对整个小团队所产生的价值负责。</p>
<h5 id="管理工具助我一臂之力"><a href="#管理工具助我一臂之力" class="headerlink" title="管理工具助我一臂之力"></a>管理工具助我一臂之力</h5><p>我们的 codereview 工具是基于 reviewboard ，会对变量、函数的命名、组件的组织与划分、业务逻辑处理的合理性等等方面进行代码审查，我自己也从最开始的不习惯到现在渐渐爱上了 review，一方面倒逼自己在日常开发中更加谨慎和注意规范与逻辑，另一方面也可以从同事的代码体会到不一样的思考方式。另外在此安利一下飞书，我们的项目是基于飞书管理的，飞书的在线文档支持多人编辑、飞书项目管理机制进程的高度定制化、甘特图轻松看到需求的人日分布等等，这些东西用起来简直不要太爽。</p>
<h5 id="不得不面对的绩效考核"><a href="#不得不面对的绩效考核" class="headerlink" title="不得不面对的绩效考核"></a>不得不面对的绩效考核</h5><p>我们公司在推行“271”（20%优秀，70%良好，10%待改进）绩效打分时，其实是都受到了很大阻力的，特别是每条产品线每个月都必须要有一个 1 时，都是一个艰难的抉择。同时也给自己提出了更高的要求，如何保证相对公平的情况下，组员坦然接受最后结果？我有一个不对外公开的飞书文档，里面按如下几个维度对组员进行一周一次的盘点：</p>
<blockquote>
<ul>
<li>个人技术：技术是否能满足需求和对应 level</li>
<li>代码质量：是否符合公司前端代码规范前端代码规范</li>
<li>对人对事态度：对事是否积极主动、有责任心，对人是否保持谦逊、善纳建议</li>
<li>任务完成度：是否因个人问题导致任务延期</li>
<li>线上 BUG：是否存在线上 BUG</li>
<li>沟通协作：是否与产品、测试、后端高效沟通</li>
<li>主观能动性（自驱）：是否积极主动学习技术和业务</li>
<li>业务理解程度：对迭代或自己负责的模块相关业务的理解</li>
</ul>
</blockquote>
<p>另有一个挑战性任务，作为本周工作是否有超预期的指标，当然不是必须要有的，只是会把这个作为一个加分项。月终会对这些数据作一次汇总算出各组员的平均值，作为当月绩效考核的依据。</p>
<h5 id="前端同样需要关注业务"><a href="#前端同样需要关注业务" class="headerlink" title="前端同样需要关注业务"></a>前端同样需要关注业务</h5><p>前端这个岗位有个天然的优势，只要给我设计稿、接口，就能把一个功能基本实现，但这是一柄双刃剑，前端的劣势也就凸显出来了 - 离业务太远。所以我们经常能看到在开需求评审会的时候，测试、后端、产品在那互相 battle，但前端却好像在神游，参与感不强，自然对项目就失去了主导权。如何破局？</p>
<blockquote>
<ul>
<li>请产品经理隔三差五在群里发一些用户使用后的效果截图或聊天记录，称赞的、吐槽的都接受；</li>
<li>需求评审的时候请产品经理说下为什么需要有这个功能，用户实际使用场景是什么，这个功能上线后能给业务带来的价值有多少；</li>
<li>鼓励组员多参加测试同学组织的业务讲解；</li>
</ul>
</blockquote>
<h4 id="生活-x2F-爱好"><a href="#生活-x2F-爱好" class="headerlink" title="生活&#x2F;爱好"></a>生活&#x2F;爱好</h4><blockquote>
<p>我的大小 baby</p>
</blockquote>
<p>早上准备上班的时候，我两岁半的女儿经常会说：“爸爸，上班是你的工作，上学是我的工作，我们都要把自己的工作做好”。于是元气满满的一天便从此刻开始；<br>晚上下班回家，不管有多晚总有一盏灯是为我留的，我的大 baby，谢谢你（狠狠的撒一把狗粮，啊哈哈）。这些大概就是卷的最好理由了 &#x3D;。&#x3D;</p>
<blockquote>
<p>看书</p>
</blockquote>
<p>针对这个话题可能有很多同学会说：看过的书第二天就忘了，有什么用呢？我来说说我的解法吧：</p>
<blockquote>
<ul>
<li>思想的转变，与其仅仅是看书，不如说是把一本好书当作与一个高手的对话，程序员圈子大多简单，如果平时社交不多，看书不失为是一种增长见识的方式，</li>
<li>看书是有技巧的，写读后感， 不用写长篇大论，2、3 百字就可以，关键是把看书过程中自己觉得最有启发或印象最深的部分，用自己话写下来。再有就是强制回忆，利用碎片时间：坐地铁、走路，快速回忆下看过的章节；</li>
</ul>
</blockquote>
<p>长期霸榜，也有可能朋友圈的人都不在电子设备上看书&#x3D;。&#x3D;</p>
<center>
    <img src="http://cdn.pluto1811.com/WechatIMG50.jpeg#pic_center" width="30%">
</center>

<h4 id="投资理财"><a href="#投资理财" class="headerlink" title="投资理财"></a>投资理财</h4><p>俗话说你不理财，财不理你；目前为止我觉得最后悔的事就是理财意识觉醒得太迟了。刚参加工作那会儿，消费没节制，基本都是月光，真正要用钱的时候，也只能是心有余而力不足。</p>
<p><strong>理财的初级：</strong></p>
<blockquote>
<p>-记账、强制存储；</p>
</blockquote>
<p>我说存钱会上瘾你相信吗？养成先结余再消费的习惯，可以有一个自己的小金库，每个月固定存一点，这种方式注定是一个漫长的过程，但本质是要我们养成储蓄的习惯，当有消费欲望时，能想到这钱我存了好久啊 ^o^，学会延迟满足；</p>
<p><strong>理财进阶：</strong></p>
<blockquote>
<p>-基金&#x2F;股票</p>
</blockquote>
<p>这里记住一定是闲钱投资，切勿融资加杠杆，那不是普通人玩的。有人一听到基金&#x2F;股票，就认为是不务正业或者是在赌博。确实，投资是一件专业性非常强的事，需要学习的东西非常多，常常听人说的“七亏二平一赚”是真实存在的。既然投资这么可怕，那我这里为什么还要建议去尝试呢？第一、在投资过程中，不可避免的要去学习一些经济、金融等等方面的知识，这对我们了解日常经济常识大有裨益；第二、能懂公司股权结构有助于我们在某天技术入股或合伙创业时了解股权的分配状况。市场有风险，入市需谨慎，那么作为普通人应该如何选择投资工具呢？ 推荐一个懒人投资方法：定投指数基金，既然采用定投的方式，那么就是一种以时间换空间、赚取市场平均收益的理财方式，忽略市场的短期波动，切记：止盈不止损。</p>
<h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>而立之年，依然需要保持对技术的热爱，同样也希望尝试不同的领域，以此来拓宽自己的边界。这些年最大的收获是冲动之前，先冷静十秒；<br>“35 岁中年危机”这个问题也会困扰我，但这反而会让我常常自省，尝试找到并发掘自己的不可替代性。平衡工作和家庭，是一种重要的生活能力， 学会与自己和解，承认自己的普通与不完美未尝不是一种成熟的表现，可以很笨，可以走得很慢，但绝不能停下脚步<br>前端老鸟 祝自己出走半生归来仍是少年。</p>
]]></content>
  </entry>
  <entry>
    <title>qiankun源码解读-示例篇</title>
    <url>/pluto/2022/09/05/qiankun01/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><font color="#ec5d3" bgcolor="#fdf5f5">qiankun</font> 是基于 single-spa 做了二次封装的微前端框架，既然是二次封装，那么少不了在此基础上解决了一些 single-spa 的缺陷和不足。</p>
<h2 id="single-spa-有哪些不足（其实也是qiankun的优点）"><a href="#single-spa-有哪些不足（其实也是qiankun的优点）" class="headerlink" title="single-spa 有哪些不足（其实也是qiankun的优点）"></a>single-spa 有哪些不足（其实也是<font color="#ec5d3" bgcolor="#fdf5f5">qiankun</font>的优点）</h2><h3 id="1-打包工具配置的不友好"><a href="#1-打包工具配置的不友好" class="headerlink" title="1. 打包工具配置的不友好"></a>1. 打包工具配置的不友好</h3><p>侵入型强其实说的就是第三点，更改打包工具的配置，使用 <font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 接入微应用需要将微应用整个打包成一个 JS 文件，发布到静态资源服务器，然后在主应用中配置该 JS 文件的地址告诉 <font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 去这个地址加载微应用。</p>
<p>不说其它的，就现在这个改动就存在很大的问题，将整个微应用打包成一个 JS 文件，常见的打包优化基本上都没了，比如：按需加载、首屏资源加载优化、css 独立打包等优化措施。</p>
<h3 id="2-样式隔离问题"><a href="#2-样式隔离问题" class="headerlink" title="2. 样式隔离问题"></a>2. 样式隔离问题</h3><p><font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 没有做这部分的工作。这时只能通过约定命名规范来实现，比如应用样式以自己的应用名称开头，以应用名构造一个独立的命名空间，这个方式新系统还好说，如果是一个已有的系统，这个改造工作量可不小。</p>
<h3 id="3-JS-隔离"><a href="#3-JS-隔离" class="headerlink" title="3. JS 隔离"></a>3. JS 隔离</h3><p>这部分工作 single-spa 也没有做。 JS 全局对象污染是一个很常见的现象，难以排查，有可能是灾难性的。</p>
<h3 id="4-资源预加载"><a href="#4-资源预加载" class="headerlink" title="4. 资源预加载"></a>4. 资源预加载</h3><p>这部分的工作<font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 更没做了，因为<font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 已经将微应用整个打包成了一个 js 文件。</p>
<h3 id="5-应用间通信"><a href="#5-应用间通信" class="headerlink" title="5. 应用间通信"></a>5. 应用间通信</h3><p>这部分工作 <font color="#ec5d3" bgcolor="#fdf5f5">single-spa</font> 没做，它只在注册微应用时给微应用注入一些状态信息，后续就不管了，没有任何通信的手段，只能用户自己去实现。</p>
<h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><blockquote>
<p><a href="https://www.zybuluo.com/static/img/logo.png">微前端框架之源码示例项目与框架源码解读</a>，由源码最简单的部分入门，先搞懂怎么启动项目的，api 怎么调用的。带着问题，再去读源码事半功倍。</p>
</blockquote>
<blockquote>
<p><a href="https://www.zybuluo.com/static/img/logo.png">qiankun 2.x 运行时沙箱 源码分析</a>，详细解读了 qiankun 2.x 版本的沙箱实现</p>
</blockquote>
<blockquote>
<p><a href="https://www.zybuluo.com/static/img/logo.png">HTML Entry 源码分析</a>，详细解读了 HTML Entry 的原理以及在 qiankun 中的应用</p>
</blockquote>
<h2 id="框架目录结构"><a href="#框架目录结构" class="headerlink" title="框架目录结构"></a>框架目录结构</h2><p>从 <a href="https://github.com/liyongning/qiankun">github</a> 克隆项目<br><img src="http://cdn.pluto1811.com/forEditor/1615968394334/1615968380013.jpg" alt="1615968380013.jpg"></p>
<hr>
<h4 id="不简单的-package-json"><a href="#不简单的-package-json" class="headerlink" title="不简单的 package.json"></a>不简单的 package.json</h4><ul>
<li><p><a href="https://www.npmjs.com/package/npm-run-all">npm-run-all</a></p>
<blockquote>
<p>一个 CLI 工具，用于并行或顺序执行多个 npm 脚本</p>
</blockquote>
</li>
<li><p><a href="https://www.npmjs.com/package/father-build">father-build</a></p>
<blockquote>
<p>基于 rollup 的库构建工具，father 更加强大</p>
</blockquote>
</li>
<li><p>多项目的目录组织以及 scripts 部分的编写</p>
</li>
<li><p>main 和 module 字段</p>
<blockquote>
<p>标识组件库的入口，当两者同时存在时，module 字段的优先级高于 main</p>
</blockquote>
</li>
</ul>
<h2 id="示例项目"><a href="#示例项目" class="headerlink" title="示例项目"></a>示例项目</h2><h3 id="主应用"><a href="#主应用" class="headerlink" title="主应用"></a>主应用</h3><p>主应用在 <font color="#ec5d3" bgcolor="#fdf5f5">examples&#x2F;main</font> 目录下，提供了两种实现方式，基于路由配置的 <font color="#ec5d3" bgcolor="#fdf5f5">registerMicroApps</font> 和 手动加载微应用的 <font color="#ec5d3" bgcolor="#fdf5f5">loadMicroApp</font>。主应用很简单，就是一个从 0 通过 webpack 配置的一个同时支持 react 和 vue 的项目，至于为什么同时支持 react 和 vue，继续往下看</p>
<h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><p>就是一个普通的 webpack 配置，配置了一个开发服务器 devServer、两个 loader (babel-loader、css loader)、一个插件 HtmlWebpackPlugin (告诉 webpack html 模版文件是哪个)<br>通过 webpack 配置文件的 entry 字段得知入口文件分别为 <font color="#ec5d3" bgcolor="#fdf5f5">index.js</font> 和 <font color="#ec5d3" bgcolor="#fdf5f5">multiple.js</font></p>
<h4 id="基于路由配置"><a href="#基于路由配置" class="headerlink" title="基于路由配置"></a>基于路由配置</h4><p>通用将微应用关联到一些 url 规则的方式，实现当浏览器 url 发生变化时，自动加载相应的微应用的功能</p>
<h4 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// qiankun api 引入</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span>
  registerMicroApps<span class="token punctuation">,</span>
  runAfterFirstMounted<span class="token punctuation">,</span>
  setDefaultMountApp<span class="token punctuation">,</span>
  start<span class="token punctuation">,</span>
  initGlobalState<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../es"</span><span class="token punctuation">;</span>
<span class="token comment">// 全局样式</span>
<span class="token keyword">import</span> <span class="token string">"./index.less"</span><span class="token punctuation">;</span>

<span class="token comment">// 专门针对 angular 微应用引入的一个库</span>
<span class="token keyword">import</span> <span class="token string">"zone.js"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 主应用可以使用任何技术栈，这里提供了 react 和 vue 两种，可以随意切换
 * 最终都导出了一个 render 函数，负责渲染主应用
 */</span>
<span class="token comment">// import render from './render/ReactRender';</span>
<span class="token keyword">import</span> render <span class="token keyword">from</span> <span class="token string">"./render/VueRender"</span><span class="token punctuation">;</span>

<span class="token comment">// 初始化主应用，其实就是渲染主应用</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义 loader 函数，切换微应用时由 qiankun 框架负责调用显示一个 loading 状态</span>
<span class="token keyword">const</span> <span class="token function-variable function">loader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">loading</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 注册微应用</span>
<span class="token function">registerMicroApps</span><span class="token punctuation">(</span>
  <span class="token comment">// 微应用配置列表</span>
  <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">// 应用名称</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"react16"</span><span class="token punctuation">,</span>
      <span class="token comment">// 应用的入口地址</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7100"</span><span class="token punctuation">,</span>
      <span class="token comment">// 应用的挂载点，这个挂载点在上面渲染函数中的模版里面提供的</span>
      <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#subapp-viewport"</span><span class="token punctuation">,</span>
      <span class="token comment">// 微应用切换时调用的方法，显示一个 loading 状态</span>
      loader<span class="token punctuation">,</span>
      <span class="token comment">// 当路由前缀为 /react16 时激活当前应用</span>
      <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">"/react16"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"react15"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7102"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#subapp-viewport"</span><span class="token punctuation">,</span>
      loader<span class="token punctuation">,</span>
      <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">"/react15"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7101"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#subapp-viewport"</span><span class="token punctuation">,</span>
      loader<span class="token punctuation">,</span>
      <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">"/vue"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"angular9"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7103"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#subapp-viewport"</span><span class="token punctuation">,</span>
      loader<span class="token punctuation">,</span>
      <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">"/angular9"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"purehtml"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7104"</span><span class="token punctuation">,</span>
      <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#subapp-viewport"</span><span class="token punctuation">,</span>
      loader<span class="token punctuation">,</span>
      <span class="token literal-property property">activeRule</span><span class="token operator">:</span> <span class="token string">"/purehtml"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// 全局生命周期钩子，切换微应用时框架负责调用</span>
  <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">beforeLoad</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这个打印日志的方法可以学习一下，第三个参数会替换掉第一个参数中的 %c%s，并且第三个参数的颜色由第二个参数决定</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[LifeCycle] before load %c%s"</span><span class="token punctuation">,</span> <span class="token string">"color: green;"</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">beforeMount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[LifeCycle] before mount %c%s"</span><span class="token punctuation">,</span> <span class="token string">"color: green;"</span><span class="token punctuation">,</span> app<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">afterUnmount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
          <span class="token string">"[LifeCycle] after unmount %c%s"</span><span class="token punctuation">,</span>
          <span class="token string">"color: green;"</span><span class="token punctuation">,</span>
          app<span class="token punctuation">.</span>name
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 定义全局状态，并返回两个通信方法</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> onGlobalStateChange<span class="token punctuation">,</span> setGlobalState <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">initGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">"qiankun"</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听全局状态的更改，当状态发生改变时执行回调函数</span>
<span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prev</span><span class="token punctuation">)</span> <span class="token operator">=></span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[onGlobalStateChange - master]:"</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> prev<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置新的全局状态，只能设置一级属性，微应用只能修改已存在的一级属性</span>
<span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">ignore</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span>
  <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置默认进入的子应用，当主应用启动以后默认进入指定微应用</span>
<span class="token function">setDefaultMountApp</span><span class="token punctuation">(</span><span class="token string">"/react16"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 启动应用</span>
<span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当第一个微应用挂载以后，执行回调函数，在这里可以做一些特殊的事情，比如开启一监控或者买点脚本</span>
<span class="token function">runAfterFirstMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[MainApp] first app mounted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h4 id="ReactRender-js"><a href="#ReactRender-js" class="headerlink" title="ReactRender.js"></a>ReactRender.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 同 vue 实现的渲染函数，这里通过 react 实现了一个一样的渲染函数
 */</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染主应用</span>
<span class="token keyword">function</span> <span class="token function">Render</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">></span>
      <span class="token punctuation">&#123;</span>loading <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>h4 className<span class="token operator">=</span><span class="token string">"subapp-loading"</span><span class="token operator">></span>Loading<span class="token operator">...</span><span class="token operator">&lt;</span><span class="token operator">/</span>h4<span class="token operator">></span><span class="token punctuation">&#125;</span>
      <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"subapp-viewport"</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 将主应用渲染到指定节点下</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> container <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"subapp-container"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>Render loading<span class="token operator">=</span><span class="token punctuation">&#123;</span>loading<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h4 id="VueRender-js"><a href="#VueRender-js" class="headerlink" title="VueRender.js"></a>VueRender.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 导出一个由 vue 实现的渲染函数，渲染了一个模版，模版里面包含一个 loading 状态节点和微应用容器节点
 */</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue/dist/vue.esm"</span><span class="token punctuation">;</span>

<span class="token comment">// 返回一个 vue 实例</span>
<span class="token keyword">function</span> <span class="token function">vueRender</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
      &lt;div id="subapp-container">
        &lt;h4 v-if="loading" class="subapp-loading">Loading...&lt;/h4>
        &lt;div id="subapp-viewport">&lt;/div>
      &lt;/div>
    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">"#subapp-container"</span><span class="token punctuation">,</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
        loading<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// vue 实例</span>
<span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 渲染函数</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 单例，如果 vue 实例不存在则实例化主应用，存在则说明主应用已经渲染，需要更新主营应用的 loading 状态</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>app<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    app <span class="token operator">=</span> <span class="token function">vueRender</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> loading <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    app<span class="token punctuation">.</span>loading <span class="token operator">=</span> loading<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="手动加载微应用"><a href="#手动加载微应用" class="headerlink" title="手动加载微应用"></a>手动加载微应用</h4><p>通常这种场景下的微应用是一个不带路由的可独立运行的业务组件，这种使用方式的情况比较少见</p>
<h4 id="multiple-js"><a href="#multiple-js" class="headerlink" title="multiple.js"></a>multiple.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> loadMicroApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"../../es"</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> app<span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  app <span class="token operator">=</span> <span class="token function">loadMicroApp</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"react15"</span><span class="token punctuation">,</span> <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7102"</span><span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#react15"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#123;</span> <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">experimentalStyleIsolation</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  app<span class="token punctuation">.</span><span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#mount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> mount<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#unmount"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> unmount<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">loadMicroApp</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span> <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token string">"//localhost:7101"</span><span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token string">"#vue"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<br />

<hr>
<h3 id="微应用"><a href="#微应用" class="headerlink" title="微应用"></a>微应用</h3><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p>vue 微应用在 <font color="#ec5d3" bgcolor="#fdf5f5">examples&#x2F;vue</font> 目录下，就是一个通过 vue-cli 创建的 vue demo 应用，然后对 <font color="#ec5d3" bgcolor="#fdf5f5">vue.config.js</font> 和 <font color="#ec5d3" bgcolor="#fdf5f5">main.js</font> 做了一些更改</p>
<h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><p>需要注意的地方就三点</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token operator">...</span>
  <span class="token comment">// publicPath 没在这里设置，是通过 webpack 提供的全局变量 __webpack_public_path__ 来即时设置的，webpackjs.com/guides/public-path/</span>
  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">...</span>
    <span class="token comment">// 设置跨域，因为主应用需要通过 fetch 去获取微应用引入的静态资源的，所以必须要求这些静态资源支持跨域</span>
    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-property property">'Access-Control-Allow-Origin'</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">-[name]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>	<span class="token comment">// 库名称，唯一</span>
    <span class="token comment">// 将你的 library 暴露为所有的模块定义下都可运行的方式</span>
    <span class="token literal-property property">libraryTarget</span><span class="token operator">:</span> <span class="token string">'umd'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">jsonpFunction</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">webpackJsonp_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
  <span class="token operator">...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 动态设置 __webpack_public_path__</span>
<span class="token keyword">import</span> <span class="token string">"./public-path"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"element-ui/lib/theme-chalk/index.css"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span>
<span class="token comment">// 路由配置</span>
<span class="token keyword">import</span> routes <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> router <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

<span class="token comment">// 应用渲染函数</span>
<span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">props <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> container <span class="token punctuation">&#125;</span> <span class="token operator">=</span> props<span class="token punctuation">;</span>
  <span class="token comment">// 实例化 router，根据应用运行环境设置路由前缀</span>
  router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 作为微应用运行，则设置 /vue 为前缀，否则设置 /</span>
    <span class="token literal-property property">base</span><span class="token operator">:</span> window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__ <span class="token operator">?</span> <span class="token string">"/vue"</span> <span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>
    routes<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 实例化 vue 实例</span>
  instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    router<span class="token punctuation">,</span>
    store<span class="token punctuation">,</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span>container <span class="token operator">?</span> container<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 支持应用独立运行</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 从 props 中获取通信方法，监听全局状态的更改和设置全局状态，只能操作一级属性
 * @param &#123;*&#125; props
 */</span>
<span class="token keyword">function</span> <span class="token function">storeTest</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  props<span class="token punctuation">.</span>onGlobalStateChange <span class="token operator">&amp;&amp;</span>
    props<span class="token punctuation">.</span><span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> prev</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[onGlobalStateChange - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>props<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">]:</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> prev<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token boolean">true</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  props<span class="token punctuation">.</span>setGlobalState <span class="token operator">&amp;&amp;</span>
    props<span class="token punctuation">.</span><span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">ignore</span><span class="token operator">:</span> props<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span> props<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 导出的三个生命周期函数
 */</span>
<span class="token comment">// 初始化</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[vue] vue app bootstraped"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 挂载微应用</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"[vue] props from main framework"</span><span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">storeTest</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 卸载、销毁微应用</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  instance<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  instance<span class="token punctuation">.</span>$el<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
  instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  router <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="public-path-js"><a href="#public-path-js" class="headerlink" title="public-path.js"></a>public-path.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 在入口文件中使用 ES6 模块导入，则在导入后对 __webpack_public_path__ 进行赋值。
 * 在这种情况下，必须将公共路径(public path)赋值移至专属模块，然后将其在最前面导入
 */</span>

<span class="token comment">// qiankun 设置的全局变量，表示应用作为微应用在运行</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>__POWERED_BY_QIANKUN__<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// eslint-disable-next-line no-undef</span>
  <span class="token comment">// __webpack_public_path__决定了webpack output.publicPath的值，用于来指定应用程序中所有的资源的基本路径</span>
  __webpack_public_path__ <span class="token operator">=</span> window<span class="token punctuation">.</span>__INJECTED_PUBLIC_PATH_BY_QIANKUN__<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续 ~"></a>未完待续 ~</h2>]]></content>
  </entry>
  <entry>
    <title>Promise里的代码为什么比setTimeout先执行？</title>
    <url>/pluto/2022/10/25/promise/</url>
    <content><![CDATA[<p>首先我们考虑一下，如果我们是浏览器或者 Node 的开发者，我们该如何使用 JavaScript 引擎。</p>
<p>当拿到一段 JavaScript 代码时，浏览器或者 Node 环境首先要做的就是；传递给 JavaScript 引擎，并且要求它去执行。</p>
<p>然而，执行 JavaScript 并非一锤子买卖，宿主环境当遇到一些事件时，会继续把一段代码传递给 JavaScript 引擎去执行，此外，我们可能还会提供 API 给 JavaScript 引擎，比如 setTimeout 这样的 API，它会允许 JavaScript 在特定的时机执行。</p>
<p>所以，我们首先应该形成一个感性的认知：一个 JavaScript 引擎会常驻于内存中，它等待着我们（宿主）把 JavaScript 代码或者函数传递给它执行。</p>
<p>在 ES3 和更早的版本中，JavaScript 本身还没有异步执行代码的能力，这也就意味着，宿主环境传递给 JavaScript 引擎一段代码，引擎就把代码直接顺次执行了，这个任务也就是宿主发起的任务。</p>
<p>但是，在 ES5 之后，JavaScript 引入了 Promise，这样，不需要浏览器的安排，JavaScript 引擎本身也可以发起任务了。</p>
<p>由于我们这里主要讲 JavaScript 语言，那么采纳 JSC 引擎的术语，我们把宿主发起的任务称为宏观任务，把 JavaScript 引擎发起的任务称为微观任务。</p>
<h3 id="宏观和微观任务"><a href="#宏观和微观任务" class="headerlink" title="宏观和微观任务"></a>宏观和微观任务</h3><p>JavaScript 引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为都是一个事件循环，所以在 Node 术语中，也会把这个部分称为事件循环。</p>
<p>一段伪代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  r <span class="token operator">=</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到，整个循环做的事情基本上就是反复“等待 - 执行”。当然，实际的代码中并没有这么简单，还有要判断循环是否结束、宏观任务队列等逻辑，这里为了方便你理解，我就把这些都省略掉了。</p>
<p>这里每次的执行过程，其实都是一个宏观任务。我们可以大概理解：宏观任务的队列就相当于事件循环。</p>
<p>在宏观任务中，JavaScript 的 Promise 还会产生异步代码，JavaScript 必须保证这些异步代码在一个宏观任务中完成，因此，每个宏观任务中又包含了一个微观任务队列：<br><img src="http://cdn.pluto1811.com/forEditor/1615188660187/event-loop.jpeg" alt="event-loop.jpeg"></p>
<p>有了宏观任务和微观任务机制，我们就可以实现 JS 引擎级和宿主级的任务了，例如：Promise 永远在队列尾部添加微观任务。setTimeout 等宿主 API，则会添加宏观任务。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 是 JavaScript 语言提供的一种标准化的异步管理方式，它的总体思想是，需要进行 io、等待或者其它异步操作的函数，不返回真实结果，而返回一个“承诺”，函数的调用方可以在合适的时机，选择等待这个承诺兑现（通过 Promise 的 then 方法的回调）。</p>
<p>Promise 的基本用法示例如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码定义了一个函数 sleep，它的作用是等候传入参数指定的时长。</p>
<p>Promise 的 then 回调是一个异步的执行过程，下面我们就来研究一下 Promise 函数中的执行顺序，我们来看一段代码示例：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们执行这段代码后，注意输出的顺序是 a b c。在进入 console.log(“b”) 之前，毫无疑问 r 已经得到了 resolve，但是 Promise 的 resolve 始终是异步操作，所以 c 无法出现在 b 之前。</p>
<p>接下来我们试试跟 setTimeout 混用的 Promise。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们发现，不论代码顺序如何，d 必定发生在 c 之后，因为 Promise 产生的是 JavaScript 引擎内部的微任务，而 setTimeout 是浏览器 API，它产生宏任务。</p>
<p>为了理解微任务始终先于宏任务，我们设计一个实验：执行一个耗时 1 秒的 Promise。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
r<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> begin <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们强制了 1 秒的执行耗时，这样，我们可以确保任务 c2 是在 d 之后被添加到任务队列。</p>
<p>我们可以看到，即使耗时一秒的 c1 执行完毕，再 enque 的 c2，仍然先于 d 执行了，这很好地解释了微任务优先的原理。</p>
<p>通过一系列的实验，我们可以总结一下如何分析异步执行的顺序：</p>
<ul>
<li>首先我们分析有多少个宏任务；</li>
<li>在每个宏任务中，分析有多少个微任务；</li>
<li>根据调用次序，确定宏任务中的微任务执行次序；</li>
<li>根据宏任务的触发规则和调用次序，确定宏任务的执行次序；</li>
<li>确定整个顺序。</li>
</ul>
<p>再来看一个稍微复杂的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是一段非常常用的封装方法，利用 Promise 把 setTimeout 封装成可以用于异步的函数。</p>
<p>我们首先来看，setTimeout 把整个代码分割成了 2 个宏观任务，这里不论是 5 秒还是 0 秒，都是一样的。</p>
<p>第一个宏观任务中，包含了先后同步执行的 console.log(“a”); 和 console.log(“b”);。</p>
<p>setTimeout 后，第二个宏观任务执行调用了 resolve，然后 then 中的代码异步得到执行，所以调用了 console.log(“c”)，最终输出的顺序才是： a b c。</p>
<p>Promise 是 JavaScript 中的一个定义，但是实际编写代码时，我们可以发现，它似乎并不比回调的方式书写更简单，但是从 ES6 开始，我们有了 async&#x2F;await，这个语法改进跟 Promise 配合，能够有效地改善代码结构。</p>
<h3 id="新特性：async-x2F-await"><a href="#新特性：async-x2F-await" class="headerlink" title="新特性：async&#x2F;await"></a>新特性：async&#x2F;await</h3><p>async&#x2F;await 是 ES2016 新加入的特性，它提供了用 for、if 等代码结构来编写异步的方式。它的运行时基础是 Promise，面对这种比较新的特性，我们先来看一下基本用法。</p>
<p>async 函数必定返回 Promise，我们把所有返回 Promise 的函数都可以认为是异步函数。</p>
<p>async 函数是一种特殊语法，特征是在 function 关键字之前加上 async 关键字，这样，就定义了一个 async 函数，我们可以在其中使用 await 来等待一个 Promise。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码利用了我们之前定义的 sleep 函数。在异步函数 foo 中，我们调用 sleep。</p>
<p>async 函数强大之处在于，它是可以嵌套的。我们在定义了一批原子操作的情况下，可以利用 async 函数组合出新的 async 函数。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token parameter">duration</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> duration<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里 foo2 用 await 调用了两次异步函数 foo，可以看到，如果我们把 sleep 这样的异步操作放入某一个框架或者库中，使用者几乎不需要了解 Promise 的概念即可进行异步编程了。</p>
<p>此外，generator&#x2F;iterator 也常常被跟异步一起来讲，我们必须说明 generator&#x2F;iterator 并非异步代码，只是在缺少 async&#x2F;await 的时候，一些框架（最著名的要数 co）使用这样的特性来模拟 async&#x2F;await。</p>
<p>但是 generator 并非被设计成实现异步，所以有了 async&#x2F;await 之后，generator&#x2F;iterator 来模拟异步的方法应该被废弃。</p>
]]></content>
  </entry>
  <entry>
    <title>qiankun源码解读-框架源码篇</title>
    <url>/pluto/2022/09/02/qiankun02/</url>
    <content><![CDATA[<h1 id="框架源码"><a href="#框架源码" class="headerlink" title="框架源码"></a>框架源码</h1><p>整个框架的源码目录是 src，入口文件是 <font color="#ec5d3c" bgcolor="#fdf5f5f5">src&#x2F;index.ts</font></p>
<h4 id="入口-src-x2F-index-ts"><a href="#入口-src-x2F-index-ts" class="headerlink" title="入口 src&#x2F;index.ts"></a>入口 src&#x2F;index.ts</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 在示例或者官网提到的所有 API 都在这里统一导出
 */</span>
<span class="token comment">// 最关键的三个，手动加载微应用、基于路由配置、启动 qiankun</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> loadMicroApp<span class="token punctuation">,</span> registerMicroApps<span class="token punctuation">,</span> start <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./apis"</span><span class="token punctuation">;</span>
<span class="token comment">// 全局状态</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> initGlobalState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./globalState"</span><span class="token punctuation">;</span>
<span class="token comment">// 全局的未捕获异常处理器</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./errorHandler"</span><span class="token punctuation">;</span>
<span class="token comment">// setDefaultMountApp 设置主应用启动后默认进入哪个微应用、runAfterFirstMounted 设置当第一个微应用挂载以后需要调用的一些方法</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./effects"</span><span class="token punctuation">;</span>
<span class="token comment">// 类型定义</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./interfaces"</span><span class="token punctuation">;</span>
<span class="token comment">// 预加载</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> prefetchImmediately <span class="token keyword">as</span> prefetchApps <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./prefetch"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="registerMicroApps"><a href="#registerMicroApps" class="headerlink" title="registerMicroApps"></a>registerMicroApps</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 注册微应用，基于路由配置
 * @param apps = [
 *  &#123;
 *    name: 'react16', 微应用名称
 *    entry: '//localhost:7100', 地址
 *    container: '#subapp-viewport', 挂载点
 *    loader,
 *    activeRule: '/react16' 相应的路由匹配相应的应用
 *  &#125;,
 *  ...
 * ]
 * @param lifeCycles = &#123; ...全局各个生命周期方法对象 &#125;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> registerMicroApps<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span>
  <span class="token literal-property property">apps</span><span class="token operator">:</span> Array<span class="token operator">&lt;</span>RegistrableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">>></span><span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 防止微应用重复注册，得到所有没有被注册的微应用列表</span>
  <span class="token keyword">const</span> unregisteredApps <span class="token operator">=</span> apps<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">app</span> <span class="token operator">=></span> <span class="token operator">!</span>microApps<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">registeredApp</span> <span class="token operator">=></span> registeredApp<span class="token punctuation">.</span>name <span class="token operator">===</span> app<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 所有的微应用 = 已注册 + 未注册的(将要被注册的)</span>
  microApps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>microApps<span class="token punctuation">,</span> <span class="token operator">...</span>unregisteredApps<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 注册每一个微应用</span>
  unregisteredApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注册时提供的微应用基本信息</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> activeRule<span class="token punctuation">,</span> loader <span class="token operator">=</span> noop<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">&#125;</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>

    <span class="token comment">// 调用 single-spa 的 registerApplication 方法注册微应用</span>
    <span class="token function">registerApplication</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token comment">// 微应用名称</span>
      name<span class="token punctuation">,</span>
      <span class="token comment">// 微应用的加载方法，Promise&lt;生命周期方法组成的对象></span>
      <span class="token function-variable function">app</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 加载微应用时主应用显示 loading 状态</span>
        <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这句可以忽略，目的是在 single-spa 执行这个加载方法时让出线程，让其它微应用的加载方法都开始执行</span>
        <span class="token keyword">await</span> frameworkStartedDefer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>

        <span class="token comment">// 核心、精髓、难点所在，负责加载微应用，然后一大堆处理，返回 bootstrap、mount、unmount、update 这个几个生命周期</span>
        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> mount<span class="token punctuation">,</span> <span class="token operator">...</span>otherMicroAppConfigs <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">loadApp</span><span class="token punctuation">(</span>
          <span class="token comment">// 微应用的配置信息</span>
          <span class="token punctuation">&#123;</span> name<span class="token punctuation">,</span> props<span class="token punctuation">,</span> <span class="token operator">...</span>appConfig <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token comment">// start 方法执行时设置的配置对象</span>
          frameworkConfiguration<span class="token punctuation">,</span>
          <span class="token comment">// 注册微应用时提供的全局生命周期对象</span>
          lifeCycles<span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
          <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">toArray</span><span class="token punctuation">(</span>mount<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
          <span class="token operator">...</span>otherMicroAppConfigs<span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 微应用的激活条件</span>
      <span class="token literal-property property">activeWhen</span><span class="token operator">:</span> activeRule<span class="token punctuation">,</span>
      <span class="token comment">// 传递给微应用的 props</span>
      <span class="token literal-property property">customProps</span><span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 启动 qiankun
 * @param opts start 方法的配置对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">opts</span><span class="token operator">:</span> FrameworkConfiguration <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// qiankun 框架默认开启预加载、单例模式、样式沙箱</span>
  frameworkConfiguration <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">prefetch</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">singular</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sandbox</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>opts<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 从这里可以看出 start 方法支持的参数不止官网文档说的那些，比如 urlRerouteOnly，这个是 single-spa 的 start 方法支持的</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> prefetch<span class="token punctuation">,</span> sandbox<span class="token punctuation">,</span> singular<span class="token punctuation">,</span> urlRerouteOnly<span class="token punctuation">,</span> <span class="token operator">...</span>importEntryOpts <span class="token punctuation">&#125;</span> <span class="token operator">=</span>
    frameworkConfiguration<span class="token punctuation">;</span>

  <span class="token comment">// 预加载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>prefetch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行预加载策略，参数分别为微应用列表、预加载策略、&#123; fetch、getPublicPath、getTemplate &#125;</span>
    <span class="token function">doPrefetchStrategy</span><span class="token punctuation">(</span>microApps<span class="token punctuation">,</span> prefetch<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 样式沙箱</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>window<span class="token punctuation">.</span>Proxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">"[qiankun] Miss window.Proxy, proxySandbox will degenerate into snapshotSandbox"</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 快照沙箱不支持非 singular 模式</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>singular<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>
          <span class="token string">"[qiankun] singular is forced to be true when sandbox enable but proxySandbox unavailable"</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果开启沙箱，会强制使用单例模式</span>
        frameworkConfiguration<span class="token punctuation">.</span>singular <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 执行 single-spa 的 start 方法，启动 single-spa</span>
  <span class="token function">startSingleSpa</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> urlRerouteOnly <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  frameworkStartedDefer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="预加载-doPrefetchStrategy"><a href="#预加载-doPrefetchStrategy" class="headerlink" title="预加载 - doPrefetchStrategy"></a>预加载 - doPrefetchStrategy</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 执行预加载策略，qiankun 支持四种
 * @param apps 所有的微应用
 * @param prefetchStrategy 预加载策略，四种 =》
 *  1、true，第一个微应用挂载以后加载其它微应用的静态资源，利用的是 single-spa 提供的 single-spa:first-mount 事件来实现的
 *  2、string[]，微应用名称数组，在第一个微应用挂载以后加载指定的微应用的静态资源
 *  3、all，主应用执行 start 以后就直接开始预加载所有微应用的静态资源
 *  4、自定义函数，返回两个微应用组成的数组，一个是关键微应用组成的数组，需要马上就执行预加载的微应用，一个是普通的微应用组成的数组，在第一个微应用挂载以后预加载这些微应用的静态资源
 * @param importEntryOpts = &#123; fetch, getPublicPath, getTemplate &#125;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">doPrefetchStrategy</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">apps</span><span class="token operator">:</span> AppMetadata<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prefetchStrategy</span><span class="token operator">:</span> PrefetchStrategy<span class="token punctuation">,</span>
  importEntryOpts<span class="token operator">?</span><span class="token operator">:</span> ImportEntryOpts<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 定义函数，函数接收一个微应用名称组成的数组，然后从微应用列表中返回这些名称所对应的微应用，最后得到一个数组[&#123;name, entry&#125;, ...]</span>
  <span class="token keyword">const</span> appsName2Apps <span class="token operator">=</span> <span class="token punctuation">(</span>names<span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> AppMetadata<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=></span> apps<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">app</span> <span class="token operator">=></span> names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>prefetchStrategy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 说明加载策略是一个数组，当第一个微应用挂载之后开始加载数组内由用户指定的微应用资源，数组内的每一项表示一个微应用的名称</span>
    <span class="token function">prefetchAfterFirstMounted</span><span class="token punctuation">(</span><span class="token function">appsName2Apps</span><span class="token punctuation">(</span>prefetchStrategy <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>prefetchStrategy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 加载策略是一个自定义的函数，可完全自定义应用资源的加载时机（首屏应用、次屏应用)</span>
    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// critical rendering apps would be prefetch as earlier as possible，关键的应用程序应该尽可能早的预取</span>
      <span class="token comment">// 执行加载策略函数，函数会返回两个数组，一个关键的应用程序数组，会立即执行预加载动作，另一个是在第一个微应用挂载以后执行微应用静态资源的预加载</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> criticalAppNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> minorAppsName <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">prefetchStrategy</span><span class="token punctuation">(</span>apps<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 立即预加载这些关键微应用程序的静态资源</span>
      <span class="token function">prefetchImmediately</span><span class="token punctuation">(</span><span class="token function">appsName2Apps</span><span class="token punctuation">(</span>criticalAppNames<span class="token punctuation">)</span><span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 当第一个微应用挂载以后预加载这些微应用的静态资源</span>
      <span class="token function">prefetchAfterFirstMounted</span><span class="token punctuation">(</span><span class="token function">appsName2Apps</span><span class="token punctuation">(</span>minorAppsName<span class="token punctuation">)</span><span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 加载策略是默认的 true 或者 all</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>prefetchStrategy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">case</span> <span class="token boolean">true</span><span class="token operator">:</span>
        <span class="token comment">// 第一个微应用挂载之后开始加载其它微应用的静态资源</span>
        <span class="token function">prefetchAfterFirstMounted</span><span class="token punctuation">(</span>apps<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">case</span> <span class="token string">'all'</span><span class="token operator">:</span>
        <span class="token comment">// 在主应用执行 start 以后就开始加载所有微应用的静态资源</span>
        <span class="token function">prefetchImmediately</span><span class="token punctuation">(</span>apps<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>

      <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 判断是否为弱网环境</span>
<span class="token keyword">const</span> isSlowNetwork <span class="token operator">=</span> navigator<span class="token punctuation">.</span>connection
  <span class="token operator">?</span> navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>saveData <span class="token operator">||</span>
    <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">'wifi'</span> <span class="token operator">&amp;&amp;</span>
      navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">'ethernet'</span> <span class="token operator">&amp;&amp;</span>
      <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(2|3)g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>effectiveType<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * prefetch assets, do nothing while in mobile network
 * 预加载静态资源，在移动网络下什么都不做
 * @param entry
 * @param opts
 */</span>
<span class="token keyword">function</span> <span class="token function">prefetch</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">entry</span><span class="token operator">:</span> Entry<span class="token punctuation">,</span> opts<span class="token operator">?</span><span class="token operator">:</span> ImportEntryOpts</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 弱网环境下不执行预加载</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>onLine <span class="token operator">||</span> isSlowNetwork<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Don't prefetch if in a slow network or offline</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 通过时间切片的方式去加载静态资源，在浏览器空闲时去执行回调函数，避免浏览器卡顿</span>
  <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 得到加载静态资源的函数</span>
    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> getExternalScripts<span class="token punctuation">,</span> getExternalStyleSheets <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 样式</span>
    <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>getExternalStyleSheets<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// js 脚本</span>
    <span class="token function">requestIdleCallback</span><span class="token punctuation">(</span>getExternalScripts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 在第一个微应用挂载之后开始加载 apps 中指定的微应用的静态资源
 * 通过监听 single-spa 提供的 single-spa:first-mount 事件来实现，该事件在第一个微应用挂载以后会被触发
 * @param apps 需要被预加载静态资源的微应用列表，[&#123; name, entry &#125;, ...]
 * @param opts = &#123; fetch , getPublicPath, getTemplate &#125;
 */</span>
<span class="token keyword">function</span> <span class="token function">prefetchAfterFirstMounted</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">apps</span><span class="token operator">:</span> AppMetadata<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> opts<span class="token operator">?</span><span class="token operator">:</span> ImportEntryOpts</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 监听 single-spa:first-mount 事件</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'single-spa:first-mount'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 已挂载的微应用</span>
    <span class="token keyword">const</span> mountedApps <span class="token operator">=</span> <span class="token function">getMountedApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从预加载的微应用列表中过滤出未挂载的微应用</span>
    <span class="token keyword">const</span> notMountedApps <span class="token operator">=</span> apps<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">app</span> <span class="token operator">=></span> mountedApps<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 开发环境打印日志，已挂载的微应用和未挂载的微应用分别有哪些</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[qiankun] prefetch starting after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>mountedApps<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> mounted...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> notMountedApps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 循环加载微应用的静态资源</span>
    notMountedApps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> entry <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">prefetch</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 移除 single-spa:first-mount 事件</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'single-spa:first-mount'</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 在执行 start 启动 qiankun 之后立即预加载所有微应用的静态资源
 * @param apps 需要被预加载静态资源的微应用列表，[&#123; name, entry &#125;, ...]
 * @param opts = &#123; fetch , getPublicPath, getTemplate &#125;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">prefetchImmediately</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">apps</span><span class="token operator">:</span> AppMetadata<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> opts<span class="token operator">?</span><span class="token operator">:</span> ImportEntryOpts</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 开发环境打印日志</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'[qiankun] prefetch starting for apps...'</span><span class="token punctuation">,</span> apps<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 加载所有微应用的静态资源</span>
  apps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> entry <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">prefetch</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="应用间通信-initGlobalState"><a href="#应用间通信-initGlobalState" class="headerlink" title="应用间通信 initGlobalState"></a>应用间通信 initGlobalState</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 触发全局监听，执行所有应用注册的回调函数</span>
<span class="token keyword">function</span> <span class="token function">emitGlobal</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>
  <span class="token literal-property property">prevState</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span></span>
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 循环遍历，执行所有应用注册的回调函数</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>deps<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>prevState<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 定义全局状态，并返回通信方法，一般由主应用调用，微应用通过 props 获取通信方法。
 * @param state 全局状态，&#123; key: value &#125;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">initGlobalState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> globalState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[qiankun] state has not changed！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 方法有可能被重复调用，将已有的全局状态克隆一份，为空则是第一次调用 initGlobalState 方法，不为空则非第一次次调用</span>
    <span class="token keyword">const</span> prevGlobalState <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>globalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将传递的状态克隆一份赋值为 globalState</span>
    globalState <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 触发全局监听，当然在这个位置调用，正常情况下没啥反应，因为现在还没有应用注册回调函数</span>
    <span class="token function">emitGlobal</span><span class="token punctuation">(</span>globalState<span class="token punctuation">,</span> prevGlobalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 返回通信方法，参数表示应用 id，true 表示自己是主应用调用</span>
  <span class="token keyword">return</span> <span class="token function">getMicroAppStateActions</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">global-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * 返回通信方法
 * @param id 应用 id
 * @param isMaster 表明调用的应用是否为主应用，在主应用初始化全局状态时，initGlobalState 内部调用该方法时会传递 true，其它都为 false
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getMicroAppStateActions</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> string<span class="token punctuation">,</span>
  isMaster<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
<span class="token punctuation">)</span><span class="token operator">:</span> MicroAppStateActions <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 全局依赖监听，为指定应用（id = 应用id）注册回调函数
     * 依赖数据结构为：
     * &#123;
     *   &#123;id&#125;: callback
     * &#125;
     *
     * @param callback 注册的回调函数
     * @param fireImmediately 是否立即执行回调
     */</span>
    <span class="token function">onGlobalStateChange</span><span class="token punctuation">(</span>
      <span class="token parameter"><span class="token literal-property property">callback</span><span class="token operator">:</span> OnGlobalStateChangeCallback<span class="token punctuation">,</span>
      fireImmediately<span class="token operator">?</span><span class="token operator">:</span> boolean</span>
    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 回调函数必须为 function</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>callback <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[qiankun] callback must be function!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 如果回调函数已经存在，重复注册时给出覆盖提示信息</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
          <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[qiankun] '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>id<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">' global listener already exists before this, new listener will overwrite it.</span><span class="token template-punctuation string">`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// id 为一个应用 id，一个应用对应一个回调</span>
      deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> callback<span class="token punctuation">;</span>
      <span class="token comment">// 克隆全局状态</span>
      <span class="token keyword">const</span> cloneState <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>globalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果需要，立即出发回调执行</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fireImmediately<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>cloneState<span class="token punctuation">,</span> cloneState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token comment">/**
     * setGlobalState 更新 store 数据
     *
     * 1. 对新输入 state 的第一层属性做校验，如果是主应用则可以添加新的一级属性进来，也可以更新已存在的一级属性，
     *    如果是微应用，则只能更新已存在的一级属性，不可以新增一级属性
     * 2. 触发全局监听，执行所有应用注册的回调函数，以达到应用间通信的目的
     *
     * @param state 新的全局状态
     */</span>
    <span class="token function">setGlobalState</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> any<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">===</span> globalState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[qiankun] state has not changed！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token comment">// 记录旧的全局状态中被改变的 key</span>
      <span class="token keyword">const</span> <span class="token literal-property property">changeKeys</span><span class="token operator">:</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 旧的全局状态</span>
      <span class="token keyword">const</span> prevGlobalState <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>globalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      globalState <span class="token operator">=</span> <span class="token function">cloneDeep</span><span class="token punctuation">(</span>
        <span class="token comment">// 循环遍历新状态中的所有 key</span>
        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_globalState<span class="token punctuation">,</span> changeKey</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>isMaster <span class="token operator">||</span> _globalState<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>changeKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 主应用 或者 旧的全局状态存在该 key 时才进来，说明只有主应用才可以新增属性，微应用只可以更新已存在的属性值，且不论主应用微应用只能更新一级属性</span>
            <span class="token comment">// 记录被改变的key</span>
            changeKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>changeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新旧状态中对应的 key value</span>
            <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>_globalState<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
              <span class="token punctuation">[</span>changeKey<span class="token punctuation">]</span><span class="token operator">:</span> state<span class="token punctuation">[</span>changeKey<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[qiankun] '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>changeKey<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">' not declared when init state！</span><span class="token template-punctuation string">`</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> _globalState<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> globalState<span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>changeKeys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"[qiankun] state has not changed！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token comment">// 触发全局监听</span>
      <span class="token function">emitGlobal</span><span class="token punctuation">(</span>globalState<span class="token punctuation">,</span> prevGlobalState<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>

    <span class="token comment">// 注销该应用下的依赖</span>
    <span class="token function">offGlobalStateChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">delete</span> deps<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="全局未捕获异常处理器"><a href="#全局未捕获异常处理器" class="headerlink" title="全局未捕获异常处理器"></a>全局未捕获异常处理器</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 整个文件的逻辑一眼明了，整个框架提供了两种全局异常捕获，一个是 single-spa 提供的，另一个是 qiankun 自己的，你只需提供相应的回调函数即可
 */</span>

<span class="token comment">// single-spa 的异常捕获</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> addErrorHandler<span class="token punctuation">,</span> removeErrorHandler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"single-spa"</span><span class="token punctuation">;</span>

<span class="token comment">// qiankun 的异常捕获</span>
<span class="token comment">// 监听了 error 和 unhandlerejection 事件</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">addGlobalUncaughtErrorHandler</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token literal-property property">errorHandler</span><span class="token operator">:</span> OnErrorEventHandlerNonNull</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"unhandledrejection"</span><span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 移除 error 和 unhandlerejection 事件监听</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">removeGlobalUncaughtErrorHandler</span><span class="token punctuation">(</span>
  <span class="token function-variable function">errorHandler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> any
<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"unhandledrejection"</span><span class="token punctuation">,</span> errorHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="setDefaultMountApp"><a href="#setDefaultMountApp" class="headerlink" title="setDefaultMountApp"></a>setDefaultMountApp</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 设置主应用启动后默认进入的微应用，其实是规定了第一个微应用挂载完成后决定默认进入哪个微应用
 * 利用的是 single-spa 的 single-spa:no-app-change 事件，该事件在所有微应用状态改变结束后（即发生路由切换且新的微应用已经被挂载完成）触发
 * @param defaultAppLink 微应用的链接，比如 /react16
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">setDefaultMountApp</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">defaultAppLink</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 当事件触发时就说明微应用已经挂载完成，但这里只监听了一次，因为事件被触发以后就移除了监听，所以说是主应用启动后默认进入的微应用，且只执行了一次的原因</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"single-spa:no-app-change"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 说明微应用已经挂载完成，获取挂载的微应用列表，再次确认确实有微应用挂载了，其实这个确认没啥必要</span>
    <span class="token keyword">const</span> mountedApps <span class="token operator">=</span> <span class="token function">getMountedApps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mountedApps<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 这个是 single-spa 提供的一个 api，通过触发 window.location.hash 或者 pushState 更改路由，切换微应用</span>
      <span class="token function">navigateToUrl</span><span class="token punctuation">(</span>defaultAppLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 触发一次以后，就移除该事件的监听函数，后续的路由切换（事件触发）时就不再响应</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"single-spa:no-app-change"</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 这个 api 和 setDefaultMountApp 作用一致，官网也提到，兼容老版本的一个 api</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">runDefaultMountEffects</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">defaultAppLink</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
    <span class="token string">"[qiankun] runDefaultMountEffects will be removed in next version, please use setDefaultMountApp instead"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">setDefaultMountApp</span><span class="token punctuation">(</span>defaultAppLink<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="runAfterFirstMounted"><a href="#runAfterFirstMounted" class="headerlink" title="runAfterFirstMounted"></a>runAfterFirstMounted</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 第一个微应用 mount 后需要调用的方法，比如开启一些监控或者埋点脚本
 * 同样利用的 single-spa 的 single-spa:first-mount 事件，当第一个微应用挂载以后会触发
 * @param effect 回调函数，当第一个微应用挂载以后要做的事情
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">runAfterFirstMounted</span><span class="token punctuation">(</span><span class="token function-variable function">effect</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// can not use addEventListener once option for ie support</span>
  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"single-spa:first-mount"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">"development"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span>firstMountLogLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这里不移除也没事，因为这个事件后续不会再被触发了</span>
    window<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">"single-spa:first-mount"</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="手动加载微应用-loadMicroApp"><a href="#手动加载微应用-loadMicroApp" class="headerlink" title="手动加载微应用 loadMicroApp"></a>手动加载微应用 loadMicroApp</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 手动加载一个微应用，是通过 single-spa 的 mountRootParcel api 实现的，返回微应用实例
 * @param app = &#123; name, entry, container, props &#125;
 * @param configuration 配置对象
 * @param lifeCycles 还支持一个全局生命周期配置对象，这个参数官方文档没提到
 */</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> loadMicroApp<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">(</span>
  <span class="token literal-property property">app</span><span class="token operator">:</span> LoadableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
  configuration<span class="token operator">?</span><span class="token operator">:</span> FrameworkConfiguration<span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> MicroApp <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> props <span class="token punctuation">&#125;</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>
  <span class="token comment">// single-spa 的 mountRootParcel api</span>
  <span class="token keyword">return</span> <span class="token function">mountRootParcel</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">loadApp</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> configuration <span class="token operator">??</span> frameworkConfiguration<span class="token punctuation">,</span> lifeCycles<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">domElement</span><span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>props<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="qiankun-的核心-loadApp"><a href="#qiankun-的核心-loadApp" class="headerlink" title="qiankun 的核心 loadApp"></a>qiankun 的核心 loadApp</h4><p>接下来介绍 loadApp 方法，个人认为 qiankun 的核心代码可以说大部分都在这里，当然这也是整个框架的精髓和难点所在</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 完成了以下几件事：
 *  1、通过 HTML Entry 的方式远程加载微应用，得到微应用的 html 模版（首屏内容）、JS 脚本执行器、静态经资源路径
 *  2、样式隔离，shadow DOM 或者 scoped css 两种方式
 *  3、渲染微应用
 *  4、运行时沙箱，JS 沙箱、样式沙箱
 *  5、合并沙箱传递出来的 生命周期方法、用户传递的生命周期方法、框架内置的生命周期方法，将这些生命周期方法统一整理，导出一个生命周期对象，
 * 供 single-spa 的 registerApplication 方法使用，这个对象就相当于使用 single-spa 时你的微应用导出的那些生命周期方法，只不过 qiankun
 * 额外填了一些生命周期方法，做了一些事情
 *  6、给微应用注册通信方法并返回通信方法，然后会将通信方法通过 props 注入到微应用
 * @param app 微应用配置对象
 * @param configuration start 方法执行时设置的配置对象
 * @param lifeCycles 注册微应用时提供的全局生命周期对象
 */</span>
<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> loadApp<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span><span class="token operator">></span><span class="token punctuation">(</span>
  <span class="token literal-property property">app</span><span class="token operator">:</span> LoadableApp<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
  <span class="token literal-property property">configuration</span><span class="token operator">:</span> FrameworkConfiguration <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  lifeCycles<span class="token operator">?</span><span class="token operator">:</span> FrameworkLifeCycles<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token operator">&lt;</span>ParcelConfigObject<span class="token operator">></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 微应用的入口和名称</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> entry<span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> appName <span class="token punctuation">&#125;</span> <span class="token operator">=</span> app<span class="token punctuation">;</span>
  <span class="token comment">// 实例 id</span>
  <span class="token keyword">const</span> appInstanceId <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>appName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

  <span class="token comment">// 下面这个不用管，就是生成一个标记名称，然后使用该名称在浏览器性能缓冲器中设置一个时间戳，可以用来度量程序的执行时间，performance.mark、performance.measure</span>
  <span class="token keyword">const</span> markName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[qiankun] App </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>appInstanceId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> Loading</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">performanceMark</span><span class="token punctuation">(</span>markName<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 配置信息</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> singular <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> sandbox <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> excludeAssetFilter<span class="token punctuation">,</span> <span class="token operator">...</span>importEntryOpts <span class="token punctuation">&#125;</span> <span class="token operator">=</span> configuration<span class="token punctuation">;</span>

  <span class="token comment">/**
   * 获取微应用的入口 html 内容和脚本执行器
   * template 是 link 替换为 style 后的 template
   * execScript 是 让 JS 代码(scripts)在指定 上下文 中运行
   * assetPublicPath 是静态资源地址
   */</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> template<span class="token punctuation">,</span> execScripts<span class="token punctuation">,</span> assetPublicPath <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">importEntry</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> importEntryOpts<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// single-spa 的限制，加载、初始化和卸载不能同时进行，必须等卸载完成以后才可以进行加载，这个 promise 会在微应用卸载完成后被 resolve，在后面可以看到</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token punctuation">(</span>prevAppUnmountedDeferred <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">.</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// --------------- 样式隔离 ---------------</span>
  <span class="token comment">// 是否严格样式隔离</span>
  <span class="token keyword">const</span> strictStyleIsolation <span class="token operator">=</span> <span class="token keyword">typeof</span> sandbox <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token operator">!</span>sandbox<span class="token punctuation">.</span>strictStyleIsolation<span class="token punctuation">;</span>
  <span class="token comment">// 实验性的样式隔离，后面就叫 scoped css，和严格样式隔离不能同时开启，如果开启了严格样式隔离，则 scoped css 就为 false，强制关闭</span>
  <span class="token keyword">const</span> enableScopedCSS <span class="token operator">=</span> <span class="token function">isEnableScopedCSS</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 用一个容器元素包裹微应用入口 html 模版, appContent = `&lt;div id="__qiankun_microapp_wrapper_for_$&#123;appInstanceId&#125;__" data-name="$&#123;appName&#125;">$&#123;template&#125;&lt;/div>`</span>
  <span class="token keyword">const</span> appContent <span class="token operator">=</span> <span class="token function">getDefaultTplWrapper</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">,</span> appName<span class="token punctuation">)</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将 appContent 有字符串模版转换为 html dom 元素，如果需要开启样式严格隔离，则将 appContent 的子元素即微应用入口模版用 shadow dom 包裹起来，以达到样式严格隔离的目的</span>
  <span class="token keyword">let</span> <span class="token literal-property property">element</span><span class="token operator">:</span> HTMLElement <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span>appContent<span class="token punctuation">,</span> strictStyleIsolation<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 通过 scoped css 的方式隔离样式，从这里也就能看出官方为什么说：</span>
  <span class="token comment">// 在目前的阶段，该功能还不支持动态的、使用 &lt;link />标签来插入外联的样式，但考虑在未来支持这部分场景</span>
  <span class="token comment">// 在现阶段只处理 style 这种内联标签的情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> <span class="token function">isEnableScopedCSS</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> styleNodes <span class="token operator">=</span> element<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'style'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">forEach</span><span class="token punctuation">(</span>styleNodes<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">stylesheetElement</span><span class="token operator">:</span> HTMLStyleElement</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      css<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>element<span class="token operator">!</span><span class="token punctuation">,</span> stylesheetElement<span class="token punctuation">,</span> appName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// --------------- 渲染微应用 ---------------</span>
  <span class="token comment">// 主应用装载微应用的容器节点</span>
  <span class="token keyword">const</span> container <span class="token operator">=</span> <span class="token string">'container'</span> <span class="token keyword">in</span> app <span class="token operator">?</span> app<span class="token punctuation">.</span>container <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  <span class="token comment">// 这个是 1.x 版本遗留下来的实现，如果提供了 render 函数，当微应用需要被激活时就执行 render 函数渲染微应用，新版本用的 container，弃了 render</span>
  <span class="token comment">// 而且 legacyRender 和 strictStyleIsolation、scoped css 不兼容</span>
  <span class="token keyword">const</span> legacyRender <span class="token operator">=</span> <span class="token string">'render'</span> <span class="token keyword">in</span> app <span class="token operator">?</span> app<span class="token punctuation">.</span>render <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

  <span class="token comment">// 返回一个 render 函数，这个 render 函数要不使用用户传递的 render 函数，要不将 element 插入到 container</span>
  <span class="token keyword">const</span> render <span class="token operator">=</span> <span class="token function">getRender</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> appContent<span class="token punctuation">,</span> container<span class="token punctuation">,</span> legacyRender<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 渲染微应用到容器节点，并显示 loading 状态</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> element<span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'loading'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 得到一个 getter 函数，通过该函数可以获取 &lt;div id="__qiankun_microapp_wrapper_for_$&#123;appInstanceId&#125;__" data-name="$&#123;appName&#125;">$&#123;template&#125;&lt;/div></span>
  <span class="token keyword">const</span> containerGetter <span class="token operator">=</span> <span class="token function">getAppWrapperGetter</span><span class="token punctuation">(</span>
    appName<span class="token punctuation">,</span>
    appInstanceId<span class="token punctuation">,</span>
    <span class="token operator">!</span><span class="token operator">!</span>legacyRender<span class="token punctuation">,</span>
    strictStyleIsolation<span class="token punctuation">,</span>
    enableScopedCSS<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> element<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// --------------- 运行时沙箱 ---------------</span>
  <span class="token comment">// 保证每一个微应用运行在一个干净的环境中（JS 执行上下文独立、应用间不会发生样式污染）</span>
  <span class="token keyword">let</span> global <span class="token operator">=</span> window<span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">mountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token function-variable function">unmountSandbox</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 生成运行时沙箱，这个沙箱其实由两部分组成 => JS 沙箱（执行上下文）、样式沙箱
     *
     * 沙箱返回 window 的代理对象 proxy 和 mount、unmount 两个方法
     * unmount 方法会让微应用失活，恢复被增强的原生方法，并记录一堆 rebuild 函数，这个函数是微应用卸载时希望自己被重新挂载时要做的一些事情，比如动态样式表重建（卸载时会缓存）
     * mount 方法会执行一些一些 patch 动作，恢复原生方法的增强功能，并执行 rebuild 函数，将微应用恢复到卸载时的状态，当然从初始化状态进入挂载状态就没有恢复一说了
     */</span>
    <span class="token keyword">const</span> sandboxInstance <span class="token operator">=</span> <span class="token function">createSandbox</span><span class="token punctuation">(</span>
      appName<span class="token punctuation">,</span>
      containerGetter<span class="token punctuation">,</span>
      <span class="token function">Boolean</span><span class="token punctuation">(</span>singular<span class="token punctuation">)</span><span class="token punctuation">,</span>
      enableScopedCSS<span class="token punctuation">,</span>
      excludeAssetFilter<span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 用沙箱的代理对象作为接下来使用的全局对象</span>
    global <span class="token operator">=</span> sandboxInstance<span class="token punctuation">.</span>proxy <span class="token keyword">as</span> <span class="token keyword">typeof</span> window<span class="token punctuation">;</span>
    mountSandbox <span class="token operator">=</span> sandboxInstance<span class="token punctuation">.</span>mount<span class="token punctuation">;</span>
    unmountSandbox <span class="token operator">=</span> sandboxInstance<span class="token punctuation">.</span>unmount<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// 合并用户传递的生命周期对象和 qiankun 框架内置的生命周期对象</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> beforeUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> afterUnmount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> afterMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beforeMount <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> beforeLoad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">mergeWith</span><span class="token punctuation">(</span>
    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">// 返回内置生命周期对象，global.__POWERED_BY_QIANKUN__ 和 global.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ 的设置就是在内置的生命周期对象中设置的</span>
    <span class="token function">getAddOns</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> assetPublicPath<span class="token punctuation">)</span><span class="token punctuation">,</span>
    lifeCycles<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token parameter">v1<span class="token punctuation">,</span> v2</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">concat</span><span class="token punctuation">(</span>v1 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v2 <span class="token operator">??</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeLoad<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// get the lifecycle hooks from module exports，获取微应用暴露出来的生命周期函数</span>
  <span class="token keyword">const</span> <span class="token literal-property property">scriptExports</span><span class="token operator">:</span> any <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">execScripts</span><span class="token punctuation">(</span>global<span class="token punctuation">,</span> <span class="token operator">!</span>singular<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> bootstrap<span class="token punctuation">,</span> mount<span class="token punctuation">,</span> unmount<span class="token punctuation">,</span> update <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">getLifecyclesFromExports</span><span class="token punctuation">(</span>scriptExports<span class="token punctuation">,</span> appName<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 给微应用注册通信方法并返回通信方法，然后会将通信方法通过 props 注入到微应用</span>
  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>
    onGlobalStateChange<span class="token punctuation">,</span>
    setGlobalState<span class="token punctuation">,</span>
    offGlobalStateChange<span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> Function<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">getMicroAppStateActions</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token literal-property property">parcelConfig</span><span class="token operator">:</span> ParcelConfigObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> appInstanceId<span class="token punctuation">,</span>
    bootstrap<span class="token punctuation">,</span>
    <span class="token comment">// 挂载阶段需要执行的一系列方法</span>
    <span class="token literal-property property">mount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token comment">// 性能度量，不用管</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">const</span> marks <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">getEntriesByName</span><span class="token punctuation">(</span>markName<span class="token punctuation">,</span> <span class="token string">'mark'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">// mark length is zero means the app is remounting</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marks<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">performanceMark</span><span class="token punctuation">(</span>markName<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 单例模式需要等微应用卸载完成以后才能执行挂载任务，promise 会在微应用卸载完以后 resolve</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">return</span> prevAppUnmountedDeferred<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 添加 mount hook, 确保每次应用加载前容器 dom 结构已经设置完毕</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// element would be destroyed after unmounted, we need to recreate it if it not exist</span>
        <span class="token comment">// unmount 阶段会置空，这里重新生成</span>
        element <span class="token operator">=</span> element <span class="token operator">||</span> <span class="token function">createElement</span><span class="token punctuation">(</span>appContent<span class="token punctuation">,</span> strictStyleIsolation<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 渲染微应用到容器节点，并显示 loading 状态</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> element<span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'mounting'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 运行时沙箱导出的 mount</span>
      mountSandbox<span class="token punctuation">,</span>
      <span class="token comment">// exec the chain after rendering to keep the behavior with beforeLoad</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 向微应用的 mount 生命周期函数传递参数，比如微应用中使用的 props.onGlobalStateChange 方法</span>
      <span class="token keyword">async</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token function">mount</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token function">containerGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setGlobalState<span class="token punctuation">,</span> onGlobalStateChange <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 应用 mount 完成后结束 loading</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> element<span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'mounted'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterMount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// initialize the unmount defer after app mounted and resolve the defer after it unmounted</span>
      <span class="token comment">// 微应用挂载完成以后初始化这个 promise，并且在微应用卸载以后 resolve 这个 promise</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          prevAppUnmountedDeferred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deferred</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 性能度量，不用管</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'development'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">const</span> measureName <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[qiankun] App </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>appInstanceId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> Loading Consuming</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
          <span class="token function">performanceMeasure</span><span class="token punctuation">(</span>measureName<span class="token punctuation">,</span> markName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 卸载微应用</span>
    <span class="token literal-property property">unmount</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>beforeUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 执行微应用的 unmount 生命周期函数</span>
      <span class="token keyword">async</span> <span class="token parameter">props</span> <span class="token operator">=></span> <span class="token function">unmount</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span>props<span class="token punctuation">,</span> <span class="token literal-property property">container</span><span class="token operator">:</span> <span class="token function">containerGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 沙箱导出的 unmount 方法</span>
      unmountSandbox<span class="token punctuation">,</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">execHooksChain</span><span class="token punctuation">(</span><span class="token function">toArray</span><span class="token punctuation">(</span>afterUnmount<span class="token punctuation">)</span><span class="token punctuation">,</span> app<span class="token punctuation">,</span> global<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token comment">// 显示 loading 状态、移除微应用的状态监听、置空 element</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">element</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'unmounted'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">offGlobalStateChange</span><span class="token punctuation">(</span>appInstanceId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// for gc</span>
        element <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token comment">// 微应用卸载以后 resolve 这个 promise，框架就可以进行后续的工作，比如加载或者挂载其它微应用</span>
      <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">validateSingularMode</span><span class="token punctuation">(</span>singular<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> prevAppUnmountedDeferred<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          prevAppUnmountedDeferred<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 微应用有可能定义 update 方法</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> update <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    parcelConfig<span class="token punctuation">.</span>update <span class="token operator">=</span> update<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> parcelConfig<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="样式隔离"><a href="#样式隔离" class="headerlink" title="样式隔离"></a>样式隔离</h4><p>qiankun 的样式隔离有两种方式，一种是严格样式隔离，通过 shadow dom 来实现，另一种是实验性的样式隔离，就是 scoped css，两种方式不可共存</p>
<h4 id="严格样式隔离"><a href="#严格样式隔离" class="headerlink" title="严格样式隔离"></a>严格样式隔离</h4><p>在 qiankun 中的严格样式隔离，就是在这个 createElement 方法中做的，通过 shadow dom 来实现， shadow dom 是浏览器原生提供的一种能力，在过去的很长一段时间里，浏览器用它来封装一些元素的内部结构。以一个有着默认播放控制按钮的 <video> 元素为例，实际上，在它的 Shadow DOM 中，包含来一系列的按钮和其他控制器。Shadow DOM 标准允许你为你自己的元素（custom element）维护一组 Shadow DOM。具体内容可查看 shadow DOM</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/**
 * 做了两件事
 *  1、将 appContent 由字符串模版转换成 html dom 元素
 *  2、如果需要开启严格样式隔离，则将 appContent 的子元素即微应用的入口模版用 shadow dom 包裹起来，达到样式严格隔离的目的
 * @param appContent = `&lt;div id="__qiankun_microapp_wrapper_for_$&#123;appInstanceId&#125;__" data-name="$&#123;appName&#125;">$&#123;template&#125;&lt;/div>`
 * @param strictStyleIsolation 是否开启严格样式隔离
 */</span>
<span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">appContent</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">strictStyleIsolation</span><span class="token operator">:</span> boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> HTMLElement <span class="token punctuation">&#123;</span>
  <span class="token comment">// 创建一个 div 元素</span>
  <span class="token keyword">const</span> containerElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 将字符串模版 appContent 设置为 div 的子与阿苏</span>
  containerElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> appContent<span class="token punctuation">;</span>
  <span class="token comment">// appContent always wrapped with a singular div，appContent 由模版字符串变成了 DOM 元素</span>
  <span class="token keyword">const</span> appElement <span class="token operator">=</span> containerElement<span class="token punctuation">.</span>firstChild <span class="token keyword">as</span> HTMLElement<span class="token punctuation">;</span>
  <span class="token comment">// 如果开启了严格的样式隔离，则将 appContent 的子元素（微应用的入口模版）用 shadow dom 包裹，以达到微应用之间样式严格隔离的目的</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>strictStyleIsolation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>supportShadowDOM<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
        <span class="token string">'[qiankun]: As current browser not support shadow dom, your strictStyleIsolation configuration will be ignored!'</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> innerHTML <span class="token punctuation">&#125;</span> <span class="token operator">=</span> appElement<span class="token punctuation">;</span>
      appElement<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> <span class="token literal-property property">shadow</span><span class="token operator">:</span> ShadowRoot<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span>appElement<span class="token punctuation">.</span>attachShadow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        shadow <span class="token operator">=</span> appElement<span class="token punctuation">.</span><span class="token function">attachShadow</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'open'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// createShadowRoot was proposed in initial spec, which has then been deprecated</span>
        shadow <span class="token operator">=</span> <span class="token punctuation">(</span>appElement <span class="token keyword">as</span> any<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createShadowRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      shadow<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> innerHTML<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> appElement<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上内容就是对 qiankun 框架的完整解读了</p>
]]></content>
  </entry>
  <entry>
    <title>在script标签写export为什么会抛错？</title>
    <url>/pluto/2022/09/21/scripttag/</url>
    <content><![CDATA[<h1 id="脚本和模块"><a href="#脚本和模块" class="headerlink" title="脚本和模块"></a>脚本和模块</h1><p>首先，JavaScript 有两种源文件，一种叫做脚本，一种叫做模块。这个区分是在 ES6 引入了模块机制开始的，在 ES5 和之前的版本中，就只有一种源文件类型（就只有脚本）。</p>
<p>脚本是可以由浏览器或者 node 环境引入执行的，而模块只能由 JavaScript 代码用 import 引入执行。</p>
<p>从概念上，我们可以认为脚本具有主动性的 JavaScript 代码段，是控制宿主完成一定任务的代码；而模块是被动性的 JavaScript 代码段，是等待被调用的库。</p>
<p>我们对标准中的语法产生式做一些对比，不难发现，实际上模块和脚本之间的区别仅仅在于是否包含 import 和 export。</p>
<p>脚本是一种兼容之前的版本的定义，在这个模式下，没有 import 就不需要处理加载“.js”文件问题。</p>
<p>现代浏览器可以支持用 script 标签引入模块或者脚本，如果要引入模块，必须给 script 标签添加 type&#x3D;“module”。如果引入脚本，则不需要 type。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"module"</span> src<span class="token operator">=</span><span class="token string">"xxxxx.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样，就回答了我们标题中的问题，script 标签如果不加 type&#x3D;“module”，默认认为我们加载的文件是脚本而非模块，如果我们在脚本中写了 export，当然会抛错。</p>
<p>脚本中可以包含语句。模块中可以包含三种内容：import 声明，export 声明和语句。先聊聊 import 声明和 export 声明吧。<br><img src="http://cdn.pluto1811.com/forEditor/1615289889189/article-15.jpeg" alt="article-15.jpeg"></p>
<h3 id="import-声明"><a href="#import-声明" class="headerlink" title="import 声明"></a>import 声明</h3><p>我们首先来介绍一下 import 声明，import 声明有两种用法，一个是直接 import 一个模块，另一个是带 from 的 import，它能引入模块里的一些信息。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"mod"</span><span class="token punctuation">;</span> <span class="token comment">// 引入一个模块</span>
<span class="token keyword">import</span> v <span class="token keyword">from</span> <span class="token string">"mod"</span><span class="token punctuation">;</span> <span class="token comment">// 把模块默认的导出值放入变量 v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>直接 import 一个模块，只是保证了这个模块代码被执行，引用它的模块是无法获得它的任何信息的。</p>
<p>带 from 的 import 意思是引入模块中的一部分信息，可以把它们变成本地的变量。</p>
<p>带 from 的 import 细分又有三种用法，可以分别看下例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> x <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span> <span class="token comment">// 引入模块中导出的默认值。</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> x<span class="token punctuation">,</span> modify <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span> <span class="token comment">// 引入模块中的变量。</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> x <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span> <span class="token comment">// 把模块中所有的变量以类似对象属性的方式引入。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>第一种方式还可以跟后两种组合使用。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> d<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> a <span class="token keyword">as</span> x<span class="token punctuation">,</span> modify <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> d<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token keyword">as</span> x <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>语法要求不带 as 的默认值永远在最前。注意，这里的变量实际上仍然可以受到原来模块的控制。</p>
<p>我们看一个例子，假设有两个模块 a 和 b。我们在模块 a 中声明了变量和一个修改变量的函数，并且把它们导出。我们用 b 模块导入了变量和修改变量的函数。</p>
<h4 id="模块-a："><a href="#模块-a：" class="headerlink" title="模块 a："></a>模块 a：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="模块-b："><a href="#模块-b：" class="headerlink" title="模块 b："></a>模块 b：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> modify <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">modify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们调用修改变量的函数后，b 模块变量也跟着发生了改变。这说明导入与一般的赋值不同，导入后的变量只是改变了名字，它仍然与原来的变量是同一个。</p>
<h3 id="export-声明"><a href="#export-声明" class="headerlink" title="export 声明"></a>export 声明</h3><p>我们再来说说 export 声明。与 import 相对，export 声明承担的是导出的任务。</p>
<p>模块中导出变量的方式有两种，一种是独立使用 export 声明，另一种是直接在声明型语句前添加 export 关键字。</p>
<p>独立使用 export 声明就是一个 export 关键字加上变量名列表，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们也可以直接在声明型语句前添加 export 关键字，这里的 export 可以加在任何声明性质的语句之前，整理如下：</p>
<ul>
<li>var</li>
<li>function (含 async 和 generator)</li>
<li>class</li>
<li>let</li>
<li>const</li>
</ul>
<p>export 还有一种特殊的用法，就是跟 default 联合使用。export default 表示导出一个默认变量值，它可以用于 function 和 class。这里导出的变量是没有名称的，可以使用 import x from “.&#x2F;a.js”这样的语法，在模块中引入。</p>
<p>export default 还支持一种语法，后面跟一个表达式，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>但是，这里的行为跟导出变量是不一致的，这里导出的是值，导出的就是普通变量 a 的值，以后 a 的变化与导出的值就无关了，修改变量 a，<strong>不会使得其他模块中引入的 default 值发生改变</strong>。</p>
<p>在 import 语句前无法加入 export，但是我们可以直接使用 export from 语法。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> a <span class="token keyword">from</span> <span class="token string">"a.js"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>JavaScript 引擎除了执行脚本和模块之外，还可以执行函数。而函数体跟脚本和模块有一定的相似之处。</p>
<h3 id="函数体"><a href="#函数体" class="headerlink" title="函数体"></a>函数体</h3><p>执行函数的行为通常是在 JavaScript 代码执行时，注册宿主环境的某些事件触发的，而执行的过程，就是执行函数体（函数的花括号中间的部分）。</p>
<p>我们先看一个例子，感性地理解一下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"go go go"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这段代码通过 setTimeout 函数注册了一个函数给宿主，当一定时间之后，宿主就会执行这个函数。宿主会为这样的函数创建宏任务。</p>
<p>当我们学习了语法之后，我们可以认为，宏任务中可能会执行的代码包括“脚本 (script)”“模块（module）”和“函数体（function body）”。</p>
<p>函数体其实也是一个语句的列表。跟脚本和模块比起来，函数体中的语句列表中多了 return 语句可以用。</p>
<p>函数体实际上有四种：</p>
<h4 id="1-普通函数体，例如："><a href="#1-普通函数体，例如：" class="headerlink" title="1. 普通函数体，例如："></a>1. 普通函数体，例如：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="2-异步函数体，例如："><a href="#2-异步函数体，例如：" class="headerlink" title="2. 异步函数体，例如："></a>2. 异步函数体，例如：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="3-生成器函数体，例如："><a href="#3-生成器函数体，例如：" class="headerlink" title="3. 生成器函数体，例如："></a>3. 生成器函数体，例如：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="4-异步生成器函数体，例如："><a href="#4-异步生成器函数体，例如：" class="headerlink" title="4. 异步生成器函数体，例如："></a>4. 异步生成器函数体，例如：</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//Function body</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面四种函数体的区别在于：能否使用 await 或者 yield 语句。<br><img src="http://cdn.pluto1811.com/forEditor/1615290998961/article-17.jpeg" alt="article-17.jpeg"></p>
<p>下面聊聊两个 JavaScript 语法的全局机制：预处理（变量提升）和指令序言。</p>
<h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>JavaScript 执行前，会对脚本、模块和函数体中的语句进行预处理。预处理过程将会提前处理 var、函数声明、class、const 和 let 这些语句，以确定其中变量的意义。</p>
<p>因为一些历史包袱，这一部分内容非常复杂，首先我们看一下 var 声明。</p>
<h4 id="var-声明"><a href="#var-声明" class="headerlink" title="var 声明"></a>var 声明</h4><p>var 声明永远作用于脚本、模块和函数体这个级别，在预处理阶段，不关心赋值的部分，只管在当前作用域声明这个变量。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码声明了一个脚本级别的 a，又声明了 foo 函数体级别的 a，我们注意到，函数体级的 var 出现在 console.log 语句之后。</p>
<p>但是预处理过程在执行之前，<strong>所以有函数体级的变量 a，就不会去访问外层作用域中的变量 a 了，而函数体级的变量 a 此时还没有赋值，所以是 undefined</strong>。我们再看一个情况：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码比上一段代码在 var a &#x3D; 2 之外多了一段 if，我们知道 if(false) 中的代码永远不会被执行，但是预处理阶段并不管这个，var 的作用能够穿透一切语句结构，它只认脚本、模块和函数体三种语法结构。所以这里结果跟前一段代码完全一样，我们会得到 undefined。</p>
<p>因为早年 JavaScript 没有 let 和 const，只能用 var，又因为 var 除了脚本和函数体都会穿透，人民群众发明了“立即执行的函数表达式（IIFE）”这一用法，用来产生作用域，例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> i<span class="token punctuation">;</span>
    div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="function-声明"><a href="#function-声明" class="headerlink" title="function 声明"></a>function 声明</h4><p>function 声明的行为原本跟 var 非常相似，但是在最新的 JavaScript 标准中，对它进行了一定的修改，这让情况变得更加复杂了。</p>
<p>在全局（脚本、模块和函数体），function 声明表现跟 var 相似，不同之处在于，function 声明不但在作用域中加入变量，还会给它赋值。</p>
<p>我们看一下 function 声明的例子</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里声明了函数 foo，在声明之前，我们用 console.log 打印函数 foo，我们可以发现，已经是函数 foo 的值了。</p>
<p>function 声明出现在 if 等语句中的情况有点复杂，它仍然作用于脚本、模块和函数体级别，在预处理阶段，仍然会产生变量，它不再被提前赋值：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码得到 undefined。如果没有函数声明，则会抛出错误。</p>
<p>这说明 function 在预处理阶段仍然发生了作用，在作用域中产生了变量，没有产生赋值，赋值行为发生在了执行阶段。</p>
<p>出现在 if 等语句中的 function，在 if 创建的作用域中仍然会被提前，产生赋值效果。</p>
<h4 id="class-声明"><a href="#class-声明" class="headerlink" title="class 声明"></a>class 声明</h4><p>class 声明在全局的行为跟 function 和 var 都不一样。</p>
<p>在 class 声明之前使用 class 名，会抛错：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这段代码我们试图在 class 前打印变量 c，我们得到了个错误，这个行为很像是 class 没有预处理，但是实际上并非如此。</p>
<p>我们看个复杂一点的例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个例子中，我们把 class 放进了一个函数体中，在外层作用域中有变量 c。然后试图在 class 之前打印 c。</p>
<p>执行后，我们看到，仍然抛出了错误，如果去掉 class 声明，则会正常打印出 1，也就是说，出现在后面的 class 声明影响了前面语句的结果。</p>
<p>这说明，class 声明也是会被预处理的，它会在作用域中创建变量，并且要求访问它时抛出错误。</p>
<p>class 的声明作用不会穿透 if 等语句结构，所以只有写在全局环境才会有声明作用。</p>
<p>这样的 class 设计比 function 和 var 更符合直觉，而且在遇到一些比较奇怪的用法时，倾向于抛出错误。</p>
<p>按照现代语言设计的评价标准，及早抛错是好事，它能够帮助我们尽量在开发阶段就发现代码的可能问题。</p>
<h3 id="指令序言机制"><a href="#指令序言机制" class="headerlink" title="指令序言机制"></a>指令序言机制</h3><p>脚本和模块都支持一种特别的语法，叫做指令序言（Directive Prologs）。</p>
<p>这里的指令序言最早是为了 use strict 设计的，它规定了一种给 JavaScript 代码添加元信息的方式。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">f</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码展示了严格模式的用法，我这里定义了函数 f，f 中打印 this 值，然后用 call 的方法调用 f，传入 null 作为 this 值，我们可以看到最终结果是 null 原封不动地被当做 this 值打印了出来，这是严格模式的特征。</p>
<p>如果我们去掉严格模式的指令需要，打印的结果将会变成 global。</p>
<p>“use strict”是 JavaScript 标准中规定的唯一一种指令序言，但是设计指令序言的目的是，留给 JS 的引擎和实现者一些统一的表达方式，在静态扫描时指定 JS 代码的一些特性。</p>
<p>例如，假设我们要设计一种声明本文件不需要进行 lint 检查的指令，我们可以这样设计：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"no lint"</span><span class="token punctuation">;</span>
<span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//......</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>JavaScript 的指令序言是只有一个字符串直接量的表达式语句，它只能出现在脚本、模块和函数体的最前面。</p>
<p>我们看两个例子：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//......</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">(</span><span class="token string">"use strict"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个例子中，”use strict”没有出现在最前，所以不是指令序言。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">doSth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//......</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//......</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个例子中，’use strict’是单引号，这不妨碍它仍然是指令序言。</p>
]]></content>
  </entry>
  <entry>
    <title>react17 合成事件</title>
    <url>/pluto/2022/07/11/react17event/</url>
    <content><![CDATA[<p>事件绑定</p>
<p>事件触发</p>
<p>程序初始化进行了插件的注册</p>
<ol>
<li>收集事件</li>
</ol>
<p>在生成 fiber 的时候就已经进行了事件插件的注册</p>
<p>ReactFiberCompleteWork.js &#x3D;&#x3D;&#x3D;&gt; finalizeInitialChildren &#x3D;&#x3D;&#x3D;&gt; setInitialProperties &#x3D;&#x3D;&#x3D;&gt; trapEventForPluginEventSystem &#x3D;&#x3D;&#x3D;&gt;</p>
<ol start="2">
<li><p>触发</p>
</li>
<li><p>合成事件对象</p>
</li>
</ol>
<p>packages&#x2F;legacy-events&#x2F;SyntheticEvent.js</p>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>既然是讨论事件，那么不得不说事件发生的三个阶段：</p>
<ol>
<li>捕获；</li>
<li>触达目标；</li>
<li>冒泡；<br>举个例子：<br>体现在原生事件上就是：<br>捕获 parent &gt;&gt;&gt; child &gt;&gt;&gt; target；<br>冒泡 target &gt;&gt;&gt; child &gt;&gt;&gt; parent；<br>如何打破这种执行机制呢？有两种方法：</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">e.stopPropagation()； &#x2F;&#x2F; 阻止事件向上冒泡
e.stopImmediatePropagation()；&#x2F;&#x2F; 阻止事件向上冒泡并同级事件也不会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>下文会给出具体的例子</p>
<pre class="line-numbers language-none"><code class="language-none">document.addEventListener(&#39;click&#39;,()&#x3D;&gt;&#123;&#125;,true);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里的 true 表示该事件发生在捕获阶段；</p>
<p>要想讨论 react 的合成事件，此处需要将 react16.x 与 react17.x 版本分开来看，因为在 react17.x 版本其事件系统发生了很大的变化；主要有如下两点区别：</p>
<ol>
<li>react16 将事件代理到了 document 上了，而 react17 是代理在当前根节点上；</li>
<li>react17 更改了事件的执行时机；</li>
<li>react17 移除了事件池；</li>
</ol>
<h4 id="React16-x-版本合成事件实现逻辑"><a href="#React16-x-版本合成事件实现逻辑" class="headerlink" title="React16.x 版本合成事件实现逻辑"></a>React16.x 版本合成事件实现逻辑</h4><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">/**
&lt;div id="parent">
  &lt;div id="child">
    点击
  &lt;/div>
&lt;/div>
 */</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">dispatchEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    target <span class="token operator">=</span> target<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 模拟捕获和冒泡</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> que<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onClickCapture<span class="token punctuation">;</span>
    handle <span class="token operator">&amp;&amp;</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> que<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onClick<span class="token punctuation">;</span>
    handle <span class="token operator">&amp;&amp;</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> dispatchEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"document原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"document原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parent<span class="token punctuation">.</span><span class="token function-variable function">onClickCapture</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent react事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent react事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function-variable function">onClickCapture</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child react事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child react事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * document原生事件捕获
 * parent原生事件捕获
 * child原生事件捕获
 * child原生事件冒泡
 * parent原生事件冒泡
 * parent react事件捕获
 * parent react事件冒泡
 * child react事件捕获
 * child react事件冒泡
 * document原生事件冒泡
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="React17-x-版本合成事件实现逻辑"><a href="#React17-x-版本合成事件实现逻辑" class="headerlink" title="React17.x 版本合成事件实现逻辑"></a>React17.x 版本合成事件实现逻辑</h4><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">/**
&lt;div id="root">
  &lt;div id="parent">
    &lt;div id="child">
      点击
    &lt;/div>
  &lt;/div>
&lt;/div>
 */</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> parent <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"parent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"child"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">dispatchEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> useCapture</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> target <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    que<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    target <span class="token operator">=</span> target<span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">// 模拟捕获和冒泡</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>useCapture<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> que<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onClickCapture<span class="token punctuation">;</span>
      handle <span class="token operator">&amp;&amp;</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> que<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">const</span> handle <span class="token operator">=</span> <span class="token punctuation">(</span>que<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>onClick<span class="token punctuation">;</span>
      handle <span class="token operator">&amp;&amp;</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

root<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> dispatchEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>

parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>
  <span class="token string">"click"</span><span class="token punctuation">,</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"root原生事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token boolean">true</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"root原生事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

root<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

parent<span class="token punctuation">.</span><span class="token function-variable function">onClickCapture</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent react事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
parent<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"parent react事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function-variable function">onClickCapture</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child react事件捕获"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span><span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"child react事件冒泡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * root原生事件捕获
 * parent react事件捕获
 * child react事件捕获
 * parent原生事件捕获
 * child原生事件捕获
 * child原生事件冒泡
 * parent原生事件冒泡
 * child react事件冒泡
 * parent react事件冒泡
 * root原生事件冒泡
 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="react17-版本为什么需要将事件的代理对象改成当前根节点"><a href="#react17-版本为什么需要将事件的代理对象改成当前根节点" class="headerlink" title="react17 版本为什么需要将事件的代理对象改成当前根节点"></a>react17 版本为什么需要将事件的代理对象改成当前根节点</h4><p>要回答这个问题需要先给出在 react16 版本里出现的一个 bug</p>
<pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">state<span class="token operator">=</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">false</span>
<span class="token punctuation">&#125;</span>
<span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">visible</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span><span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        点击打开dialog
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">
      </span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>visible <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Dialog</span></span><span class="token punctuation">/></span></span>
      <span class="token punctuation">&#125;</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>已上代码在 react16 版本会如何表现呢？</p>
<p>答案是：</p>
<p>Dialog 弹窗永远不会显示；</p>
<p>原因是当点击按钮时，visible 状态确实改为 true 了，按钮说此时弹窗应该显示，但事件会冒泡到 document 此时又触发 visible:false，因此弹窗又被隐藏了；</p>
<p>这是有人说按钮点击时加一个 e.stopPropagation()阻止向上冒泡不就可以了吗？</p>
<p>但 React16 版本将 document 作为事件的代理对象，按钮的点击事件实际是委托到 document 上了，e.stopPropagation()只会阻止向上冒泡，但无法阻止同级；因此在这里是无效的；</p>
<p>终极解决办法是：按钮点击时添加 e.stopImmediatePropagation();</p>
<p>当然这个问题放在 React17 版本就不会存在了，因为在 17 版本事件的委托对象变成了根节点，与 document 不在同级，因此使用 e.stopPropagation()是可以生效的。</p>
<p>以上。</p>
]]></content>
  </entry>
  <entry>
    <title>一个细节：try里面放return，finally还会执行吗？</title>
    <url>/pluto/2022/09/24/trycatch/</url>
    <content><![CDATA[<p><img src="http://cdn.pluto1811.com/forEditor/1615281494461/1615281460255.jpg" alt="1615281460255.jpg"><br>JavaScript 中一个更为细节的部分：语句。</p>
<p>语句是任何编程语言的基础结构，与 JavaScript 对象一样，JavaScript 语句同样具有“看起来很像其它语言，但是其实一点都不一样”的特点。</p>
<p>为了了解 JavaScript 语句有哪些特别之处，首先我们要看一个不太常见的例子，我会通过这个例子，来向你介绍 JavaScript 语句执行机制涉及的一种基础类型：Completion 类型。</p>
<h3 id="Completion-类型"><a href="#Completion-类型" class="headerlink" title="Completion 类型"></a>Completion 类型</h3><p>我们来看一个例子。在函数 foo 中，使用了一组 try 语句。我们可以先来做一个小实验，在 try 中有 return 语句，finally 中的内容还会执行吗？我们来看一段代码。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过实际试验，我们可以看到，finally 确实执行了，而且 return 语句也生效了，foo() 返回了结果 0。</p>
<p>虽然 return 执行了，但是函数并没有立即返回，又执行了 finally 里面的内容，这样的行为违背了很多人的直觉。</p>
<p>如果在这个例子中，我们在 finally 中加入 return 语句，会发生什么呢？</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过实际执行，我们看到，finally 中的 return “覆盖”了 try 中的 return。在一个函数中执行了两次 return，这已经超出了很多人的常识，也是其它语言中不会出现的一种行为。</p>
<p>面对如此怪异的行为，我们当然可以把它作为一个孤立的知识去记忆，但是实际上，这背后有一套机制在运作。</p>
<p>这一机制的基础正是 JavaScript 语句执行的完成状态，我们用一个标准类型来表示：Completion Record（我在类型一节提到过，Completion Record 用于描述异常、跳出等语句执行过程）。</p>
<p>Completion Record 表示一个语句执行完之后的结果，它有三个字段：</p>
<blockquote>
<ul>
<li>[[type]] 表示完成的类型，有 break continue return throw 和 normal 几种类型；</li>
<li>[[value]] 表示语句的返回值，如果语句没有，则是 empty；</li>
<li>[[target]] 表示语句的目标，通常是一个 JavaScript 标签（标签在后文会有介绍）</li>
</ul>
</blockquote>
<p>JavaScript 正是依靠语句的 Completion Record 类型，方才可以在语句的复杂嵌套结构中，实现各种控制。接下来我们要来了解一下 JavaScript 使用 Completion Record 类型，控制语句执行的过程。</p>
<p>首先我们来看看语句有几种分类。</p>
<p><img src="http://cdn.pluto1811.com/forEditor/1615282135422/article-11.jpeg" alt="article-11.jpeg"></p>
<h3 id="普通的语句"><a href="#普通的语句" class="headerlink" title="普通的语句"></a>普通的语句</h3><p>在 JavaScript 中，我们把不带控制能力的语句称为普通语句。普通语句有下面几种。</p>
<ul>
<li>声明类语句</li>
<li>var 声明</li>
<li>const 声明</li>
<li>let 声明</li>
<li>函数声明</li>
<li>类声明</li>
<li>表达式语句</li>
<li>空语句</li>
<li>debugger 语句</li>
</ul>
<p>这些语句在执行时，从前到后顺次执行（我们这里先忽略 var 和函数声明的预处理机制），没有任何分支或者重复执行逻辑。</p>
<p>普通语句执行后，会得到 [[type]] 为 normal 的 Completion Record，JavaScript 引擎遇到这样的 Completion Record，会继续执行下一条语句。</p>
<p>这些语句中，只有表达式语句会产生 [[value]]，当然，从引擎控制的角度，这个 value 并没有什么用处。</p>
<p>如果你经常使用 chrome 自带的调试工具，可以知道，输入一个表达式，在控制台可以得到结果，但是在前面加上 var，就变成了 undefined。</p>
<p><img src="http://cdn.pluto1811.com/forEditor/1615282329690/article-12.png" alt="article-12.png"></p>
<p>Chrome 控制台显示的正是语句的 Completion Record 的 [[value]]。</p>
<h3 id="语句块"><a href="#语句块" class="headerlink" title="语句块"></a>语句块</h3><p>介绍完了普通语句，我们再来介绍一个比较特殊的语句：语句块。</p>
<p>语句块就是拿大括号括起来的一组语句，它是一种语句的复合结构，可以嵌套。</p>
<p>语句块本身并不复杂，我们需要注意的是语句块内部的语句的 Completion Record 的 [[type]] 如果不为 normal，会打断语句块后续的语句执行。</p>
<p>比如我们考虑，一个 [[type]] 为 return 的语句，出现在一个语句块中的情况。</p>
<p>从语句的这个 type 中，我们大概可以猜到它由哪些特定语句产生，我们就来说说最开始的例子中的 return。</p>
<p>return 语句可能产生 return 或者 throw 类型的 Completion Record。我们来看一个例子。</p>
<p>先给出一个内部为普通语句的语句块：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// normal, empty, empty</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// normal, 1, empty</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//normal, undefined, empty</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// normal, undefined, empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在每一行的注释中，我给出了语句的 Completion Record。</p>
<p>我们看到，在一个 block 中，如果每一个语句都是 normal 类型，那么它会顺次执行。接下来我们加入 return 试试看。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// normal, empty, empty</span>
  <span class="token keyword">return</span> i<span class="token punctuation">;</span> <span class="token comment">// return, 1, empty</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// return, 1, empty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是假如我们在 block 中插入了一条 return 语句，产生了一个非 normal 记录，那么整个 block 会成为非 normal。这个结构就保证了非 normal 的完成类型可以穿透复杂的语句嵌套结构，产生控制效果。</p>
<p>接下来我们就具体讲讲控制类语句。</p>
<h3 id="控制型语句"><a href="#控制型语句" class="headerlink" title="控制型语句"></a>控制型语句</h3><p>控制型语句带有 if、switch 关键字，它们会对不同类型的 Completion Record 产生反应。</p>
<p>控制类语句分成两部分，一类是对其内部造成影响，如 if、switch、while&#x2F;for、try。另一类是对外部造成影响如 break、continue、return、throw，这两类语句的配合，会产生控制代码执行顺序和执行逻辑的效果，这也是我们编程的主要工作。</p>
<p>一般来说， for&#x2F;while - break&#x2F;continue 和 try - throw 这样比较符合逻辑的组合，是大家比较熟悉的，但是，实际上，我们需要控制语句跟 break 、continue 、return 、throw 四种类型与控制语句两两组合产生的效果。</p>
<p><img src="http://cdn.pluto1811.com/forEditor/1615282627332/article-13.png" alt="article-13.png"></p>
<p>通过这个表，我们不难发现知识的盲点，也就是我们最初的的 case 中的 try 和 return 的组合了。</p>
<p>因为 finally 中的内容必须保证执行，所以 try&#x2F;catch 执行完毕，即使得到的结果是非 normal 型的完成记录，也必须要执行 finally。</p>
<p>而当 finally 执行也得到了非 normal 记录，则会使 finally 中的记录作为整个 try 结构的结果。</p>
<h3 id="带标签的语句"><a href="#带标签的语句" class="headerlink" title="带标签的语句"></a>带标签的语句</h3><p>前文我重点讲了 type 在语句控制中的作用，接下来我们重点来讲一下最后一个字段：target，这涉及了 JavaScript 中的一个语法，带标签的语句。</p>
<p>实际上，任何 JavaScript 语句是可以加标签的，在语句前加冒号即可：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">firstStatement</span><span class="token operator">:</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>大部分时候，这个东西类似于注释，没有任何用处。唯一有作用的时候是：与完成记录类型中的 target 相配合，用于跳出多层循环。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">inner</span><span class="token operator">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">break</span> outer<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>break&#x2F;continue 语句如果后跟了关键字，会产生带 target 的完成记录。一旦完成记录带了 target，那么只有拥有对应 label 的循环语句会消费它。</p>
]]></content>
  </entry>
  <entry>
    <title>浅析 valueOf &amp; toString &amp; toPrimitive</title>
    <url>/pluto/2022/10/08/valueOf/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>valueOf: 返回对象的原始值表示<br>toString: 返回对象的字符串表示<br>toPrimitive: 一个内置的 Symbol 值，它是作为对象的函数值属性存在的，如果对象中存在个属性时，当一个对象转换为对应的原始值时，会优先调用此函数</p>
<span id="more"></span>

<h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论"></a>先说结论</h3><p>对于对象类型的数据进行转换时</p>
<ol>
<li>如果期望是转换为字符串，则优先调用 toString()方法，如没有再调用 valueOf()方法;</li>
<li>如果期望转换为数字则优先调用 valueOf()方法，如没有再调用 toString()方法;</li>
<li>如果定义了 Symbol.toPrimitive 方法，则优先调用；</li>
</ol>
<p>以上结论都是建立在该对象具有 toString()、valueOf()、Symbol.toPrimitive 三者方法任意一种存在。如果是 Object.create(null) 定义的对象，尝试转换，那么会直接抛错</p>
<h3 id="细说规则"><a href="#细说规则" class="headerlink" title="细说规则"></a>细说规则</h3><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><p>对于基础类型的数据，直接返回改类型</p>
<p>boolean<br>null<br>undefined<br>string<br>number<br>symbol</p>
<p>对于非原始值的重写规则如下</p>
<table>
<thead>
<tr>
<th>对象</th>
<th>valueOf 的返回值</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>数组本身</td>
</tr>
<tr>
<td>Boolean</td>
<td>布尔值</td>
</tr>
<tr>
<td>Date</td>
<td>返回毫秒形式的时间戳</td>
</tr>
<tr>
<td>Function</td>
<td>函数本身</td>
</tr>
<tr>
<td>Number</td>
<td>数字值</td>
</tr>
<tr>
<td>Object</td>
<td>对象本身</td>
</tr>
<tr>
<td>String</td>
<td>字符串值</td>
</tr>
</tbody></table>
<h4 id="toString-转换规则"><a href="#toString-转换规则" class="headerlink" title="toString 转换规则"></a>toString 转换规则</h4><p>这里附带一个小知识点 toString 与 String 的异同？</p>
<p>相同点：都是将一个值转换成字符串</p>
<p>区别：toString 可以传参，表示以多少位的格式输出结果；String 方法传参无效</p>
<ol>
<li>null 和 undefined 不能调用 toString，而 String 可以转换 null 和 undefined</li>
<li><table>
<thead>
<tr>
<th>对象</th>
<th>toString 的返回值</th>
</tr>
</thead>
<tbody><tr>
<td>Array</td>
<td>以逗号分割的字符串，如[1,2]的 toString 返回值为”1,2”</td>
</tr>
<tr>
<td>Boolean</td>
<td>True</td>
</tr>
<tr>
<td>Date</td>
<td>可读的时间字符串，如”Tue Oct 15 2019 12:20:56 GMT+0800 (中国标准时间)”</td>
</tr>
<tr>
<td>Function</td>
<td>声明函数的 JS 源代码字符串</td>
</tr>
<tr>
<td>Number</td>
<td>“数字值”</td>
</tr>
<tr>
<td>Object</td>
<td>“[object Object]”</td>
</tr>
<tr>
<td>String</td>
<td>“字符串”</td>
</tr>
</tbody></table>
</li>
</ol>
<h4 id="toPrimitive-转换规则"><a href="#toPrimitive-转换规则" class="headerlink" title="toPrimitive 转换规则"></a>toPrimitive 转换规则</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>hint 并不需要我们手动传入，而是 JS 根据上下文自动判断。hint 参数的只能 string，number，default 三者之一。</p>
<p>“string”</p>
<p>对象到字符串的转换，当我们对期望一个字符串的对象执行操作时，如 “alert”</p>
<p>“number”</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 显式转换</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 数学运算（除了二元加法） let n = +obj;</span>

<span class="token comment">// 一元加法</span>
<span class="token keyword">let</span> delta <span class="token operator">=</span> date1 <span class="token operator">-</span> date2<span class="token punctuation">;</span>

<span class="token comment">// 小于/大于的比较</span>

<span class="token keyword">let</span> greater <span class="token operator">=</span> user1 <span class="token operator">></span> user2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>“default”</p>
<p>在少数情况下发生，当运算符“不确定”期望值的类型时。<br>例如，二元加法 + 可用于字符串（连接），也可以用于数字（相加），所以字符串和数字这两种类型都可以。因此，当二元加法得到对象类型的参数时，它将依据 “default” hint 来对其进行转换。<br>此外，如果对象被用于与字符串、数字或 symbol 进行 &#x3D;&#x3D; 比较，这时到底应该进行哪种转换也不是很明确，因此使用 “default” hint。</p>
<p>下面用几道面试题来巩固以上知识点</p>
<ol>
<li>函数柯里化，期望 curry(1, 2)(3, 4, 5)(6)(7, 8) 实现累加的效果</li>
</ol>
<p>首先函数柯里化，这个比较简单 主要运用闭包就可以解决</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>agrs1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>agrs1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关键是如果让 res 这个值具有累加效果呢，这里就要运用到我们上面讨论的知识了</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>agrs1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>agrs1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  sum<span class="token punctuation">.</span>__proto__<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>toPrimitive<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">hint</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>t <span class="token operator">+=</span> c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">curry</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>2.实现 a&#x3D;&#x3D; 1&amp;&amp;a&#x3D;&#x3D;2&amp;&amp;a&#x3D;&#x3D;3 为 true 与 a&#x3D;&#x3D;&#x3D;1&amp;&amp;a&#x3D;&#x3D;&#x3D;2&amp;&amp;a&#x3D;&#x3D;&#x3D;3 为 true</p>
<p>看到这个题目是不是脑瓜子嗡嗡的？其实如果理解到了上面说到的知识点，也不是没有思路</p>
<p>首先 对于 &#x3D;&#x3D; 会进行隐式转换</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> v<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>&#x3D;&#x3D;&#x3D; 在严格模式下不会进行隐式转换，因此在这里我们需要进行一些特殊处理</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> value<span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上。。。</p>
]]></content>
  </entry>
  <entry>
    <title>从零实现Vue3.x-工程&amp;架构篇</title>
    <url>/pluto/2022/08/10/vue3-01/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>温故而知新，虽然 vue3.x 已经发布很久了，但对于源码的分析总能让我们每次都有收获，因此决定写一个 vue3.x 的源码分析的系列文章，vue 版本是 3.2.26。主要从以下几个方面展开分析：</p>
<ol>
<li>工程&amp;架构</li>
<li>响应式系统</li>
<li>渲染器 &amp; diff 算法</li>
<li>内置组件</li>
</ol>
<h3 id="目录划分："><a href="#目录划分：" class="headerlink" title="目录划分："></a>目录划分：</h3><img src="http://cdn.pluto1811.com/1654418177792.jpg">
采用 monorepo 架构，做到了模块的统一管理与单独发布，相比于vue2.x尽可能的做到了模块之间的解耦.

<h4 id="项目的起点：package-json"><a href="#项目的起点：package-json" class="headerlink" title="项目的起点：package.json"></a>项目的起点：package.json</h4><ol>
<li>npm 的钩子函数</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"3.2.22"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"preinstall"</span><span class="token operator">:</span> <span class="token string">"node ./scripts/preinstall.js"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 相关的钩子：依次执行</span>
# install 之前执行这个脚本
preinstall
# 执行 install 脚本
install
# install 之后执行这个脚本
postinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>代码风格检查与提交规范</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"gitHooks"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"pre-commit"</span><span class="token operator">:</span> <span class="token string">"lint-staged"</span><span class="token punctuation">,</span>
  <span class="token property">"commit-msg"</span><span class="token operator">:</span> <span class="token string">"node scripts/verifyCommit.js"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token property">"lint-staged"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token property">"*.js"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"prettier --write"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"*.ts?(x)"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"eslint"</span><span class="token punctuation">,</span>
    <span class="token string">"prettier --parser=typescript --write"</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>workspace:*</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"@vue/reactivity"</span><span class="token operator">:</span> <span class="token string">"workspace:*"</span><span class="token punctuation">,</span>
<span class="token property">"@vue/runtime-core"</span><span class="token operator">:</span> <span class="token string">"workspace:*"</span><span class="token punctuation">,</span>
<span class="token property">"@vue/runtime-dom"</span><span class="token operator">:</span> <span class="token string">"workspace:*"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在 pnpm 模式下 package.json 有一种特殊的写法：”workspace:*“，为了指明这是工作区的依赖，防止自动去 npm 上寻找导致混乱，当使用此协议时，pnpm 将拒绝解析除本地 workspace 包含的 package 之外的任何内容。</p>
<p>例如，如果 bar 中有 “foo”：”^1.0.0” 的这个依赖项，则 <a href="mailto:&#x66;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#x2e;&#x30;">&#x66;&#111;&#111;&#64;&#49;&#x2e;&#x30;&#x2e;&#x30;</a> 链接到 bar。 但是，如果 bar 的依赖项中有 “foo”: “2.0.0”，而 <a href="mailto:&#102;&#111;&#x6f;&#x40;&#x32;&#46;&#x30;&#x2e;&#x30;">&#102;&#111;&#x6f;&#x40;&#x32;&#46;&#x30;&#x2e;&#x30;</a> 在工作空间中并不存在，此时会从 npm registry 上安装<a href="mailto:&#x66;&#x6f;&#x6f;&#x40;&#50;&#x2e;&#48;&#x2e;&#48;">&#x66;&#x6f;&#x6f;&#x40;&#50;&#x2e;&#48;&#x2e;&#48;</a>，如果设置为 “foo”: “workspace:2.0.0” 时，安装将会失败，因为 “<a href="mailto:&#x66;&#111;&#111;&#x40;&#x32;&#46;&#48;&#x2e;&#x30;">&#x66;&#111;&#111;&#x40;&#x32;&#46;&#48;&#x2e;&#x30;</a>“ 不存在于此 workspace 中</p>
<ol start="4">
<li>packages 中每个模块中都有一个 json 文件</li>
</ol>
<p>这个文件主要是与<a href="https://www.npmjs.com/package/@microsoft/api-extractor">@microsoft&#x2F;api-extractor</a>这个插件配合使用</p>
<ul>
<li><p>可以产生三种不同的输出类型:</p>
</li>
<li><p>API Report —API Extractor 可以跟踪项目主入口点的所有导出，并生成一个报告作为 API 审查工作流的基础。</p>
</li>
<li><p>.d.ts Rollups—类似于 Webpack 可以将所有 JavaScript 文件“卷起”到一个包中进行分发，API Extractor 可以将你的 TypeScript 声明卷成一个单独的.d。ts 文件。</p>
</li>
<li><p>API Documentation—API Extractor 可以为每个项目生成“doc model”JSON 文件。这个 JSON 文件包含提取的类型签名和文档注释。API -documenter 配套工具可以使用这些文件生成 API 参考网站，也可以使用它们作为自定义文档管道的输入。</p>
</li>
</ul>
<p>这是为了指明这是工作区的依赖，防止自动去 npm 上寻找导致混乱。当使用此协议时，pnpm 将拒绝解析除本地 workspace 包含的 package 之外的任何内容。</p>
<h4 id="为什么是-pnpm？"><a href="#为什么是-pnpm？" class="headerlink" title="为什么是 pnpm？"></a>为什么是 pnpm？</h4><p>pnpm 是一个包管理器，本质上与 npm&#x2F;yarn 是一样的，但它却有几个优势：</p>
<ol>
<li>依赖安装速度极快；</li>
<li>磁盘空间利用高；<br>同一个包不会重复安装，比如 10 个项目都依赖了 lodash，在 npm&#x2F;yarn 中，lodash 可能会被安装 10 次；极大程度地复用之前版本的代码，</li>
<li>天然支持 monorepo<br>只需要在项目更目录新增一个 pnpm-workspace.yaml</li>
</ol>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">packages:
  - 'packages/*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="4">
<li>避免依赖包的非法访问<br>比如在 a 包中依赖了 lodash，那么我们在项目的 package.json 文件中不用显式的声明 lodash 依赖；这样不是很好吗？但我们考虑一下场景：<br>如果有天 a 包中移除了 lodash 依赖，那么可能会导致我们自己的项目异常；</li>
</ol>
<h4 id="开发语言：摈弃-flow，全面采用-ts"><a href="#开发语言：摈弃-flow，全面采用-ts" class="headerlink" title="开发语言：摈弃 flow，全面采用 ts"></a>开发语言：摈弃 flow，全面采用 ts</h4><p>在 vue2.x 时代，尤大更中意的是 Facebook（现在应该叫 Meta 了）开源的 flow，但没想到 flow 最后烂尾了，而 typescript 生态则越来越丰富，其他的正如<a href="https://vuejs.org/guide/typescript/overview.html" >Vue 官方说的</a>：<br>构建时通过静态分析检测许多常见错误。这减少了生产中出现运行时错误的机会，也使我们能够更自信地重构大规模应用程序中的代码。TypeScript 还通过 ide 中基于类型的自动补全改进了开发者的体验。</p>
<h4 id="开发环境采用-esbuild-构建代码"><a href="#开发环境采用-esbuild-构建代码" class="headerlink" title="开发环境采用 esbuild 构建代码"></a>开发环境采用 esbuild 构建代码</h4><p>Esbuild 是由 Figma 的 CTO 「Evan Wallace」基于 Golang 开发的一款打包工具，相比传统的打包工具，主打性能优势，在构建速度上可以快 10~100 倍。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>target<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/src/index.ts</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 入口文件</span>
  outfile<span class="token punctuation">,</span> <span class="token comment">// 打包生成的产物路径</span>
  <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  external<span class="token punctuation">,</span>
  <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启sourcemap</span>
  <span class="token literal-property property">format</span><span class="token operator">:</span> outputFormat<span class="token punctuation">,</span> <span class="token comment">// 生成产物的格式 目前支持 iife 自执行函数、cjs 主要是node环境、esm 以es6语法产出 支持 &lt;script type="mudule"></span>
  <span class="token literal-property property">globalName</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>name<span class="token punctuation">,</span> <span class="token comment">// 自执行函数的全局名</span>
  <span class="token literal-property property">platform</span><span class="token operator">:</span> format <span class="token operator">===</span> <span class="token string">'cjs'</span> <span class="token operator">?</span> <span class="token string">'node'</span> <span class="token operator">:</span> <span class="token string">'browser'</span><span class="token punctuation">,</span> <span class="token comment">// 针对的平台</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span>
    format <span class="token operator">===</span> <span class="token string">'cjs'</span> <span class="token operator">||</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token operator">?.</span>enableNonBrowserBranches
      <span class="token operator">?</span> <span class="token punctuation">[</span>nodePolyfills<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
      <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token literal-property property">define</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 全局变量 类似于 webpack.defineplugin</span>
    <span class="token literal-property property">__COMMIT__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"dev"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__VERSION__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkg<span class="token punctuation">.</span>version<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">__DEV__</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">true</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token operator">...</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 文件变动的监听函数</span>
    <span class="token function">onRebuild</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rebuilt: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>relativeOutfile<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>从零实现vue3.x-响应式系统</title>
    <url>/pluto/2022/08/02/vue3-03/</url>
    <content><![CDATA[<p>这是-从零实现 Vue3.x 系列的第三篇。</p>
<p>这一章节来实现 Vue3.x 的响应式系统，在此之前得先搞懂一个基础知识：<br>Vue3.x 采用的是 es5+ 的 Proxy 的方式来生成一个代理对象，并重新定义了 getter、setter 方法，这与 Vue2.x 响应原理的区别：</p>
<ul>
<li>初始化时 vue2.x 是利用 Object.defineProperty 来拦截对象的 getter&#x2F;setter 方法，需要遍历对象所有 key，如果对象层次较深，性能不好</li>
<li>通知更新过程需要维护大量 dep 实例和 watcher 实例，额外占用内存较多</li>
<li>无法监听到数组元素的变化，只能通过劫持重写了几个数组方法</li>
<li>动态新增，删除对象属性无法拦截，只能用特定 set&#x2F;delete API 代替</li>
<li>不支持 Map、Set 等数据结构</li>
</ul>
<h3 id="一、基于-new-Proxy-重新定义响应方法"><a href="#一、基于-new-Proxy-重新定义响应方法" class="headerlink" title="一、基于 new Proxy 重新定义响应方法"></a>一、基于 new Proxy 重新定义响应方法</h3><p>在 packages 目录下新建 reactivity 目录</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">|-packages                    -- 模块集合
    |--reactivity                  -- vue的响应式模块
        |--src
            |--index.ts                           -- reactivity模块入口文件
            |--reactive.ts                        -- 响应式模块
            |--baseHandler.ts                     -- get/set方法单独抽离出来
            |--reactiveFlags.ts                     -- 枚举值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// index.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactive"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// reactive.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">REACTIVE_FLAGS</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactiveFlags"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> mutaleBaseHandler <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./baseHandler"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> proxyMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isReactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>value <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">[</span><span class="token constant">REACTIVE_FLAGS</span><span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
同一个object
const obj = &#123; a: "1" &#125;;
const a = vueReactivity.reactive(obj);
const b = vueReactivity.reactive(obj);
console.log(a === b);
*/</span>
  <span class="token keyword">const</span> existProxy <span class="token operator">=</span> proxyMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>existProxy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> existProxy<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">/*
如果一个对象已经被proxy代理过了，则直接返回
const obj = &#123; a: "1" &#125;;
const a = vueReactivity.reactive(obj);
const b = vueReactivity.reactive(a);
console.log(a === b);
*/</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token constant">REACTIVE_FLAGS</span><span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> mutaleBaseHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
  proxyMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二、建立-baseHandler-ts-文件，抽离-proxy-中-get、set-方法"><a href="#二、建立-baseHandler-ts-文件，抽离-proxy-中-get、set-方法" class="headerlink" title="二、建立 baseHandler.ts 文件，抽离 proxy 中 get、set 方法"></a>二、建立 baseHandler.ts 文件，抽离 proxy 中 get、set 方法</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// baseHandler.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">REACTIVE_FLAGS</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactiveFlags"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> track<span class="token punctuation">,</span> trigger <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./effect"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactive"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> mutaleBaseHandler <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 当一个对象已经被proxy代理过了，那么再次读取REACTIVE_FLAGS.IS_REACTIVE属性时，会触发get方法，由此返回true</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token constant">REACTIVE_FLAGS</span><span class="token punctuation">.</span><span class="token constant">IS_REACTIVE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 依赖收集</span>
    <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 解决 this 的指向问题</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token function">reactive</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 深度代理，取值的时候才代理，性能好</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> oldValue <span class="token operator">=</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 触发更新</span>
      <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">"set"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="三、建立-effect-ts-文件，当触发-set-时需要重新执行的函数"><a href="#三、建立-effect-ts-文件，当触发-set-时需要重新执行的函数" class="headerlink" title="三、建立 effect.ts 文件，当触发 set 时需要重新执行的函数"></a>三、建立 effect.ts 文件，当触发 set 时需要重新执行的函数</h3><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; effect.ts

export let activeEffect &#x3D; undefined;

const cleanupEffect &#x3D; (context) &#x3D;&gt; &#123;
  for (let index &#x3D; 0; index &lt; context.deps.length; index++) &#123;
    const element &#x3D; context.deps[index];
    element.delete(context);
  &#125;
  context.deps.length &#x3D; 0;
&#125;;

export class ReactiveEffect &#123;
  public parent &#x3D; null;

  &#x2F;&#x2F; 储存effect对应的依赖 方便effect卸载时 删除对应的依赖
  public deps &#x3D; [];

  &#x2F;&#x2F; 标记当前effect是否被激活 只有在激活状态 才会有依赖收集
  public active &#x3D; true;

  constructor(public fn, public scheduler) &#123;&#125;

  run() &#123;
    if (!this.active) &#123;
      &#x2F;&#x2F; 未激活 只需要执行fn即可
      return this.fn();
    &#125;
    try &#123;
      &#x2F;*
effect嵌套时 activeEffect 与属性对应关系会错乱
比如：
effect(()&#x3D;&gt;&#123; effect1
    state.name name -&gt; effect1
    effect(()&#x3D;&gt;&#123; effect2
        state.age  age -&gt; effect2
    &#125;)
    state.address address -&gt; undefined ( finally 执行的结果 )
&#125;)
*&#x2F;
      this.parent &#x3D; activeEffect;
      activeEffect &#x3D; this;
      cleanupEffect(this);
      return this.fn();
    &#125; finally &#123;
      activeEffect &#x3D; this.parent;
      this.parent &#x3D; null;
    &#125;
  &#125;

  stop() &#123;
    this.active &#x3D; false;
    cleanupEffect(this);
  &#125;
&#125;

export const effect &#x3D; (fn, options: any &#x3D; &#123;&#125;) &#x3D;&gt; &#123;
  const _effect &#x3D; new ReactiveEffect(fn, options.scheduler);

  const runner &#x3D; _effect.run.bind(_effect);

  runner.effect &#x3D; _effect;

  _effect.run();

  return runner;
&#125;;

&#x2F;*
这里需要区分Map与WeakMap
WeakMap中的key只能是对象，且key为弱引用，如果key被删除了，那么垃圾回收会释放该对象所占用的内存，防止内存泄露
*&#x2F;
const targetMap &#x3D; new WeakMap();

export const trackEffects &#x3D; (dep) &#x3D;&gt; &#123;
  const shouldTrack &#x3D; dep.has(activeEffect);
  if (!shouldTrack) &#123;
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
  &#125;
&#125;;

&#x2F;**
 * 此处需要注意数据结构
 * weakMap&#123;key:target,value:Map&#123;key:key,value:Set&#125;&#125;
 * @param target
 * @param type
 * @param key
 * @returns
 *&#x2F;
export const track &#x3D; (target, type, key) &#x3D;&gt; &#123;
  if (!activeEffect) return;
  let depMap &#x3D; targetMap.get(target);
  if (!depMap) &#123;
    targetMap.set(target, (depMap &#x3D; new Map()));
  &#125;
  let dep &#x3D; depMap.get(key);
  if (!dep) &#123;
    depMap.set(key, (dep &#x3D; new Set()));
  &#125;

  trackEffects(dep);
&#125;;

export const triggerEffects &#x3D; (effects) &#x3D;&gt; &#123;
  if (effects) &#123;
    &#x2F;*
逻辑分支切换时清除effect对应的依赖，对于Set数据的删除、新增、循环操作时 造成的死循环
   比如：effect(()&#x3D;&gt;flag?state.name:state.age)
*&#x2F;
    effects &#x3D; new Set(effects);
    effects.forEach((effect) &#x3D;&gt; &#123;
      &#x2F;*
 解决循环调用trigger
 * 比如：
 * effect(() &#x3D;&gt; &#123;
      state.a &#x3D; Math.random();
      document.getElementById(&quot;app&quot;).innerHTML &#x3D; state.a;
    &#125;);
*&#x2F;
      if (activeEffect !&#x3D;&#x3D; effect) &#123;
&#x2F;&#x2F; 如果用户自定义了更新函数 则执行
        if (effect.scheduler) &#123;
          effect.scheduler();
        &#125; else &#123;
          effect.run();
        &#125;
      &#125;
    &#125;);
  &#125;
&#125;;

export const trigger &#x3D; (target, type, key) &#x3D;&gt; &#123;
  const depMap &#x3D; targetMap.get(target);
  if (!depMap) return;
  let effects &#x3D; depMap.get(key);
  triggerEffects(effects);
&#125;;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>从零实现Vue3.x-项目搭建</title>
    <url>/pluto/2022/07/20/vue3-02/</url>
    <content><![CDATA[<p>这是从零实现 Vue3.x 系列的第二篇—<strong>项目的搭建</strong></p>
<h3 id="一、初始化-pnpm-环境"><a href="#一、初始化-pnpm-环境" class="headerlink" title="一、初始化 pnpm 环境"></a>一、初始化 pnpm 环境</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g pnpm@<span class="token number">6</span><span class="token punctuation">.</span>x <span class="token comment">// 为什么选择pnpm请移步上一篇</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">pnpm init <span class="token operator">-</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="二、构建-monorepo-环境"><a href="#二、构建-monorepo-环境" class="headerlink" title="二、构建 monorepo 环境"></a>二、构建 monorepo 环境</h3><p>在项目根目录新建 pnpm-workspace.yaml 文件</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text"> packages
- 'packages/*'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="三、必需的几个-npm-包"><a href="#三、必需的几个-npm-包" class="headerlink" title="三、必需的几个 npm 包"></a>三、必需的几个 npm 包</h3><ol>
<li>minimist 解析 node 命令参数；</li>
<li>esbuild 用于开发环境的打包；</li>
<li>typescript</li>
</ol>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">pnpm install  -w minimist esbuild typescript // -w 是--workspace-root的缩写 代表根目录中启动 pnpm ，而不是当前的工作目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="四、初始化-ts-环境"><a href="#四、初始化-ts-环境" class="headerlink" title="四、初始化 ts 环境"></a>四、初始化 ts 环境</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">tsc init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在生成的 tsconfig.json 文件中添加</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>
  <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"@mini-vue/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"packages/*/src/"</span><span class="token punctuation">]</span> <span class="token comment">// 这里的@mini-vue是我们自定义的包名</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="五、编写运行命令"><a href="#五、编写运行命令" class="headerlink" title="五、编写运行命令"></a>五、编写运行命令</h3><p>在 package.json，scripts 下新增命令</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"node scripts/dev.js reactivity -f global"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>reactivity 表示需要打包的目录<br>-f 表示打包输入的文件格式（支持三种：cjs、esm、iife）</p>
<h3 id="六、搭建开发环境"><a href="#六、搭建开发环境" class="headerlink" title="六、搭建开发环境"></a>六、搭建开发环境</h3><p>在项目根目录创建 scripts 目录，专门存放脚本文件</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">|-scripts                    -- 专门存放脚本文件
    |--dev.js                   -- 开发环境<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在 dev.js 文件中</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> minimist <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"minimist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> esbuild <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"esbuild"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token function">minimist</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> pkgName <span class="token operator">=</span> args<span class="token punctuation">.</span>_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 获取命令行中指定的包名</span>

<span class="token keyword">const</span> f <span class="token operator">=</span> args<span class="token punctuation">.</span>f <span class="token operator">||</span> <span class="token string">"global"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> pkg <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
  __dirname<span class="token punctuation">,</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkgName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/package.json</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> entry <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkgName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/src/index.ts</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> outfile <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>
  __dirname<span class="token punctuation">,</span>
  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">../packages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkgName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/dist/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>pkgName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>f<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.js</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> format <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"iife"</span> <span class="token operator">:</span> f<span class="token punctuation">;</span>

esbuild
  <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">entryPoints</span><span class="token operator">:</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">,</span>
    outfile<span class="token punctuation">,</span>
    <span class="token literal-property property">bundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token literal-property property">sourcemap</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    format<span class="token punctuation">,</span> <span class="token comment">// 打包输出的文件格式</span>
    <span class="token literal-property property">globalName</span><span class="token operator">:</span> pkg<span class="token punctuation">.</span>buildOptions<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token comment">// iife格式的文件定义的全局变量</span>
    <span class="token literal-property property">platform</span><span class="token operator">:</span> f<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"cjs"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"node"</span> <span class="token operator">:</span> <span class="token string">"browser"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token function">onRebuild</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"watch build failed:"</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watch build succeeded:"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"watch..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="七、测试项目是否能正常运行"><a href="#七、测试项目是否能正常运行" class="headerlink" title="七、测试项目是否能正常运行"></a>七、测试项目是否能正常运行</h3><p>在根目录下新建</p>
<pre class="line-numbers language-text" data-language="text"><code class="language-text">|-packages                    -- 模块集合
    |--reactivity                  -- vue的响应式模块
        |--src
            |--index.ts                        -- reactivity模块入口文件
            |--reactive.ts                     -- 响应式模块
    |--shared                      -- vue的共享工具类函数
        |--src
            |--index.ts                        -- shared模块源码部分<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shared-index.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">// reactivity-index.ts</span>
<span class="token keyword">export</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactive"</span><span class="token punctuation">;</span>
<span class="token comment">// reactive.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">reactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来运行<br><img src="http://cdn.pluto1811.com/forEditor/1654500181395/1654500145806.jpg" alt="1654500145806.jpg"><br>此时在 reactivity 目录下会生成一个 dist 文件，这个就是打包后的产物<br><img src="http://cdn.pluto1811.com/forEditor/1654500334946/1654500325823.jpg" alt="1654500325823.jpg"></p>
<p>大功告成，我们可以安心的正式开始编码阶段了!</p>
]]></content>
  </entry>
  <entry>
    <title>从零实现vue3.x-ref、computed、watch的实现</title>
    <url>/pluto/2022/08/06/vue3-04/</url>
    <content><![CDATA[<p>这是从零实现 Vue3.x 系列的第四篇，上一篇我们基本实现了 Vue3 的整个响应式系统，并将部分的实现逻辑进行了封装。本章我们继续实现几个主要的 api</p>
<h3 id="一、ref-的实现"><a href="#一、ref-的实现" class="headerlink" title="一、ref 的实现"></a>一、ref 的实现</h3><p>Proxy 只能代理对象，无法对基本类型进行属性代理，由此可见为什么我们在使用 ref 时，一定要加上.value 了吧</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// ref.js</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> trackEffects<span class="token punctuation">,</span> triggerEffects <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./effect"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject<span class="token punctuation">,</span> isArray <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> reactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactive"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">toReactive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">object</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">reactive</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token operator">:</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">RefImpl</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> deps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> _value<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">public</span> rawValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">toReactive</span><span class="token punctuation">(</span>rawValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/*
还记得这个方法吗？这个方法是我们在实现effect函数的时候抽离出来将当前activeEffect集中收集起来的公共方法
*/</span>
    <span class="token function">trackEffects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 触发更新</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 将当前_value重新赋值方便在下次取值时能取到最新的</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token function">toReactive</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">triggerEffects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>deps<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ref</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RefImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="二、computed-的实现"><a href="#二、computed-的实现" class="headerlink" title="二、computed 的实现"></a>二、computed 的实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// computed.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isFunction<span class="token punctuation">,</span> isObject <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ReactiveEffect<span class="token punctuation">,</span> trackEffects<span class="token punctuation">,</span> triggerEffects <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./effect"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">ComputedRefImpl</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span> dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 是否重新计算的标志符</span>
  <span class="token keyword">public</span> __v_isRef <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> _value<span class="token punctuation">;</span>
  <span class="token keyword">public</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> effect<span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">getter<span class="token punctuation">,</span> <span class="token keyword">public</span> setter</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">/*
 实例化一个副作用函数 此处的getter相当于effect方法的回调函数，并且此处自定义了更新逻辑方便切换dirty属性的状态
当在computed所依赖的属性触发setter时，会触发自定义更新逻辑，此时dirty属性为true，当下一次取值时就需要重新计算了
*/</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// 触发更新</span>
        <span class="token function">triggerEffects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">get</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 收集依赖</span>
    <span class="token function">trackEffects</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 第一次取值的时候，运行计算逻辑，并将标志符dirty置为false，在computed所依赖的属性没有更新时，再次取computed值时，直接返回_value，这就是computed具有缓存计算结果，提升性能的原因</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dirty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>_value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">set</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
computed的写法有两种：
1. computed(()=>state.firstName+state.lastName)
2. computed(&#123;
  getter()&#123;&#125;,
  setter()&#123;&#125;
&#125;)
因此在这里需要做一次转换
*/</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">computed</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> getter<span class="token punctuation">;</span>
  <span class="token keyword">let</span> setter<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    getter <span class="token operator">=</span> params<span class="token punctuation">;</span>
    <span class="token function-variable function">setter</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    getter <span class="token operator">=</span> params<span class="token punctuation">.</span>getter<span class="token punctuation">;</span>
    setter <span class="token operator">=</span> params<span class="token punctuation">.</span>setter<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ComputedRefImpl</span><span class="token punctuation">(</span>getter<span class="token punctuation">,</span> setter<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="三、watch-的实现"><a href="#三、watch-的实现" class="headerlink" title="三、watch 的实现"></a>三、watch 的实现</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// watch.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isObject<span class="token punctuation">,</span> isFunction <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@mini-vue/shared"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isReactive <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./reactive"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> ReactiveEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./effect"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token comment">/*
注意点：避免循环引用，比如：
const obj = &#123;
a: obj
&#125;
*/</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">traverse</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">watch</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">source<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 将wrapperFn包装成一个函数，类似effect的回调函数，方便后续调用</span>
  <span class="token keyword">let</span> wrapperFn<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isReactive</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// traverse 函数其实就是递归的触发Proxy对象的getter方法 方便依赖收集</span>
    <span class="token function-variable function">wrapperFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">traverse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    wrapperFn <span class="token operator">=</span> source<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> oldValue<span class="token punctuation">;</span>

  <span class="token keyword">let</span> innerCleanFn<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">onCleanUp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">cleanFn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    innerCleanFn <span class="token operator">=</span> cleanFn<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token comment">// 在trigger时才执行</span>
  <span class="token keyword">const</span> <span class="token function-variable function">scheduler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 首次不触发</span>
    innerCleanFn <span class="token operator">&amp;&amp;</span> <span class="token function">innerCleanFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> newValue <span class="token operator">=</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fn</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> onCleanUp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    oldValue <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactiveEffect</span><span class="token punctuation">(</span>wrapperFn<span class="token punctuation">,</span> scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>

  oldValue <span class="token operator">=</span> effect<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>浅析 webpack5 重点是联邦模块实现微前端</title>
    <url>/pluto/2022/10/08/webpack5/</url>
    <content><![CDATA[<h3 id="webpack5-新特性："><a href="#webpack5-新特性：" class="headerlink" title="webpack5 新特性："></a>webpack5 新特性：</h3><ul>
<li><p>启动命令<br>开发环境：webpack serve<br>生产环境：webpack</p>
</li>
<li><p>持久化缓存<br>会缓存生成的 webpack 模块合 chunk，来改善构建速度<br>默认开启，默认缓存在内存中，但可以对 cache 进行设置<br>webpack 追踪了每个模块的依赖，并创建了文件快照，与真实的文件系统进行对比，当发生差异时，触发对应的模块重新构建</p>
<span id="more"></span>
</li>
<li><p>资源模块，原生支持 json、png、jpeg、jpg、txt 等格式文件<br>无需配置额外的 loader，raw-loader&#x2F;file-loader&#x2F;url-loader 等等</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 'javascript/auto' | 'javascript/dynamic' | 'javascript/esm' | 'json' | 'webassembly/sync' | 'webassembly/async' | 'asset' | 'asset/source' | 'asset/resource' | 'asset/inline'</span>
  <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.json$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 这里也可以配置png/jpg/txt 只是type选项的不同</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">'javascript/auto'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">loader</span><span class="token operator">:</span> <span class="token string">'custom-json-loader'</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>moduleIds &amp; chunkIds 的优化<br>在 webpack5 之前，没有从 entry 打包的 chunk 文件，都会以 1、2、3。。。的文件命名方式输出，删除某些文件可能会导致缓存失效；<br>在 webpack5 中，生产环境下默认使用了 deterministic 的方式生成短 hash 值来分配给 modules 和 chunks 来解决上述问题</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">moduleIds</span><span class="token operator">:</span> <span class="token string">'deterministic'</span><span class="token punctuation">,</span>
  <span class="token literal-property property">chunkIds</span><span class="token operator">:</span> <span class="token string">'deterministic'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>更智能的 tree shaking<br>webpack4 tree-shaking 是通过扫描文件中未引用到的函数实现再将其剔除实现的，作用很小，如果使用场景有嵌套的方法引用，就不管用了；<br>在 webpack5 中：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">optimization</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">usedExports</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>另外还可以在 package.json 中配置 sideEffects:false 表示整个项目都没有副作用，webpack 在打包时会自动剔除具有副作用代码；<br>当然也可以指定类型或文件保留副作用，比如配置 sideEffects: [‘*.css’] 表示保留 import ‘.&#x2F;index.css’ 类似的代码</p>
</li>
<li><p>模块联邦</p>
</li>
</ul>
<p>更多更新特性请看：<a href="https://github.com/webpack/webpack/releases/tag/v4.0.0">changelog</a></p>
<h4 id="这里着重介绍-webpack5-史诗级更新：模块联邦"><a href="#这里着重介绍-webpack5-史诗级更新：模块联邦" class="headerlink" title="这里着重介绍 webpack5 史诗级更新：模块联邦"></a>这里着重介绍 webpack5 史诗级更新：模块联邦</h4><p>先初始化两个项目 provider、comsumer</p>
<pre class="line-numbers language-none"><code class="language-none">pnpm install webpack webpack-cli webpack-dev-server html-webpack-plugin babel-loader @babel&#x2F;preset-env @babel&#x2F;preset-react @babel&#x2F;core style-loader css-loader -D

pnpm install react react-dom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在熟悉这个功能之前，我们先理清两个重要的角色，webpack 官网上提出了两个概念：remotes 和 host，但个人更倾向于叫它们为 provider 和 comsumer，首先我们先构建一个简单的联邦模块结构。</p>
<h4 id="对于-provider"><a href="#对于-provider" class="headerlink" title="对于 provider"></a>对于 provider</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// provider</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ModuleFederationPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"provider"</span><span class="token punctuation">,</span> <span class="token comment">// 必须唯一 模块的名称</span>
      <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">"remoteEntry.js"</span><span class="token punctuation">,</span> <span class="token comment">// 必须 生成的模块名称</span>
      <span class="token literal-property property">exposes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 很明显，需要对外暴露的模块 注意该对象的key必须这么写</span>
        <span class="token string-property property">"./Search"</span><span class="token operator">:</span> <span class="token string">"./src/Search"</span><span class="token punctuation">,</span>
        <span class="token string-property property">"./utils"</span><span class="token operator">:</span> <span class="token string">"./src/utils"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="对于-comsumer"><a href="#对于-comsumer" class="headerlink" title="对于 comsumer"></a>对于 comsumer</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// comsumer</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ModuleFederationPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"comsumer"</span><span class="token punctuation">,</span> <span class="token comment">// 必须唯一 模块的名称</span>
      <span class="token comment">// 很明显，需要映射的远程provider</span>
      <span class="token literal-property property">remotes</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 这个地方来拆解下这个对象的参数
         * key: 无所谓随意取，但在后续消费的时候有用
         * value: "provider@http://localhost:9000/remoteEntry.js"
         * 这里的provider：依然是上面provider的name
         * http://localhost:9000/： 这个表示provider的远程地址
         * remoteEntry.js：指的是上面provider中定义的filename
         */</span>
        <span class="token literal-property property">module1</span><span class="token operator">:</span> <span class="token string">"provider@http://localhost:9000/remoteEntry.js"</span><span class="token punctuation">,</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="provider-和-comsumer-配置定义好了，下面来看下在-comsumer-中怎么用吧"><a href="#provider-和-comsumer-配置定义好了，下面来看下在-comsumer-中怎么用吧" class="headerlink" title="provider 和 comsumer 配置定义好了，下面来看下在 comsumer 中怎么用吧"></a>provider 和 comsumer 配置定义好了，下面来看下在 comsumer 中怎么用吧</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> lazy<span class="token punctuation">,</span> Suspense<span class="token punctuation">,</span> useEffect <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * import("module1/Search")
 * 这里的module1 指的是上面comsumer配置中定义remotes时设置的key
 * Search 指的是上面provider配置中定义exposes时设置的key
 */</span>
<span class="token keyword">const</span> ProviderSearch <span class="token operator">=</span> <span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"module1/Search"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>h1<span class="token operator">></span>这是comsumer项目<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span>Suspense<span class="token operator">></span>
        <span class="token operator">&lt;</span>ProviderSearch <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>Suspense<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除此之外还有一种全局调用的方法：</p>
<p>在 provider 中加上</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// provider</span>
<span class="token keyword">const</span> <span class="token punctuation">&#123;</span> ModuleFederationPlugin <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>container<span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token operator">...</span>
      <span class="token literal-property property">library</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"var"</span><span class="token punctuation">,</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"provider"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在需要使用的地方，注意这里可以不用区别在 provider、comsumer 项目中</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">loadComponent</span><span class="token punctuation">(</span><span class="token parameter">scope<span class="token punctuation">,</span> module</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Initializes the shared scope. Fills it with known provided modules from this build and all remotes</span>
    <span class="token keyword">await</span> <span class="token function">__webpack_init_sharing__</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> container <span class="token operator">=</span> window<span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// or get the container somewhere else</span>
    <span class="token comment">// Initialize the container, it may provide shared modules</span>
    <span class="token keyword">await</span> container<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>__webpack_share_scopes__<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> factory <span class="token operator">=</span> <span class="token keyword">await</span> window<span class="token punctuation">[</span>scope<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Module <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> Module<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">loadComponent</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">,</span> <span class="token string">"utils"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至此，一个完整的联邦模块配置就搭建完成了。</p>
]]></content>
  </entry>
</search>
